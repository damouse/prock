
/*
 * This file is dynamically generated by a python script based on AST node documentation from RedBaron.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 *
 * The classes defined here inherit from BoxActor, which is responsible for implementation, and PythonNode, 
 * which is responsible for interfacing with python AST nodes. Edit those classes to add functionality. 
 */

#pragma once

#include "GameFramework/Actor.h"
#include "BoxActor.h"
#include "NodeBox.generated.h"



/*
A node representing generator passed as an argument during a function call.

Equivalent python:

    a(x for y in z)

RedBaron .help() text:

    ArgumentGeneratorComprehensionNode()
      # identifiers: argument_generator_comprehension, argument_generator_comprehension_, argumentgeneratorcomprehension, argumentgeneratorcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['generators'],
     '_str_keys': ['type'],
     'generators': <NodeList [0, 'value', 1, 'value', 0, 'generators'], " for y in z" 72834128, on ArgumentGeneratorComprehensionNode 72834464>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(x for y in z)" 72834744, on AtomtrailersNode 72773360>,
     'result': <NameNode path=[0, 'value', 1, 'value', 0, 'result'], "x" 72834632, on ArgumentGeneratorComprehensionNode 72834464>,
     'type': 'argument_generator_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API ArgumentGeneratorComprehensionNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ArgumentGeneratorComprehensionNode(PyObject *native) : PythonNode(native) {}
    ArgumentGeneratorComprehensionNode() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing the assert statement.

Equivalent python:

    assert test, message

RedBaron .help() text:

    AssertNode()
      # identifiers: assert, assert_, assertnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='test'
      message ->
        NameNode()
          # identifiers: name, name_, namenode
          value='message'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'message'],
     '_list_keys': ['first_formatting', 'second_formatting', 'third_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75823312, on AssertNode 75823480>,
     'init': False,
     'message': <NameNode path=[0, 'message'], "message" 75823256, on AssertNode 75823480>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "assert test, message" 75823144, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 75823536, on AssertNode 75823480>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 75823592, on AssertNode 75823480>,
     'type': 'assert',
     'value': <NameNode path=[0, 'value'], "test" 75823760, on AssertNode 75823480>}
    
*/
UCLASS()
class PROCKFPS_API AssertNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    AssertNode(PyObject *native) : PythonNode(native) {}
    AssertNode() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Message();


	char *Type();

};


/*
A node representing the assign operation in python (:file:`foo = bar`) and the"augmented" assign (:file:`foo += bar`).

Equivalent python:

    a = b

RedBaron .help() text:

    AssignmentNode()
      # identifiers: assign, assignment, assignment_, assignmentnode
      operator=''
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target', 'value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'operator'],
     'first_formatting': <NodeList [0, 'first_formatting'], " " 72831832, on AssignmentNode 72832224>,
     'init': False,
     'on_attribute': 'root',
     'operator': '',
     'parent': <RedBaron [], "a = b" 72831664, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 72832448, on AssignmentNode 72832224>,
     'target': <NameNode path=[0, 'target'], "a" 72831888, on AssignmentNode 72832224>,
     'type': 'assignment',
     'value': <NameNode path=[0, 'value'], "b" 72832000, on AssignmentNode 72832224>}
    
*/
UCLASS()
class PROCKFPS_API AssignmentNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    AssignmentNode(PyObject *native) : PythonNode(native) {}
    AssignmentNode() : PythonNode(nullptr) {}

	NodeBox *Target();
	NodeBox *Value();


	char *Type();
	char *Operator();

};


/*
This node represents a statement prioritised on another by being surrounded byparenthesis. For e.g., the first part of this addition: :file:`(1 + 1) * 2`.

Equivalent python:

    (foo)

RedBaron .help() text:

    AssociativeParenthesisNode()
      # identifiers: associative_parenthesis, associative_parenthesis_, associativeparenthesis, associativeparenthesisnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='foo'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 72832784, on AssociativeParenthesisNode 72832336>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75823368, on AssociativeParenthesisNode 72832336>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(foo)" 61479624, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 72834968, on AssociativeParenthesisNode 72832336>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 72832280, on AssociativeParenthesisNode 72832336>,
     'type': 'associative_parenthesis',
     'value': <NameNode path=[0, 'value'], "foo" 72831160, on AssociativeParenthesisNode 72832336>}
    
*/
UCLASS()
class PROCKFPS_API AssociativeParenthesisNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    AssociativeParenthesisNode(PyObject *native) : PythonNode(native) {}
    AssociativeParenthesisNode() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
This node represents a combination of :ref:`NameNode`, :ref:`DotNode`,:ref:`CallNode`, :ref:`GetitemNode` sorted in a list. For e.g.::file:`a.b().c[d]`.

Equivalent python:

    a.b().c[d]

RedBaron .help() text:

    AtomtrailersNode()
      # identifiers: atomtrailers, atomtrailers_, atomtrailersnode
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
        * NameNode()
            # identifiers: name, name_, namenode
            value='b'
        * CallNode()
            # identifiers: call, call_, callnode
            value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='c'
        * GetitemNode()
            # identifiers: getitem, getitem_, getitemnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 72832784, on AssociativeParenthesisNode 72832336>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75823368, on AssociativeParenthesisNode 72832336>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(foo)" 61479624, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 72834968, on AssociativeParenthesisNode 72832336>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 72832280, on AssociativeParenthesisNode 72832336>,
     'type': 'associative_parenthesis',
     'value': <NameNode path=[0, 'value'], "foo" 72831160, on AssociativeParenthesisNode 72832336>}
    
*/
UCLASS()
class PROCKFPS_API AtomtrailersNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    AtomtrailersNode(PyObject *native) : PythonNode(native) {}
    AtomtrailersNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
The node represents a binary number value.

Equivalent python:

    0b10101

RedBaron .help() text:

    BinaryNode()
      # identifiers: binary, binary_, binarynode
      value='0b10101'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "0b10101" 75857088, on NoneType 1961454680>,
     'type': 'binary',
     'value': '0b10101'}
    
*/
UCLASS()
class PROCKFPS_API BinaryNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    BinaryNode(PyObject *native) : PythonNode(native) {}
    BinaryNode() : PythonNode(nullptr) {}

	char *Type();
	char *Value();

};


/*
The node represents a binary operator (an operator (e.g: :file:`+` :file:`-` :file:`/`..) applied to 2 values) with its operands. For e.g.: :file:`1 + 1`.

Equivalent python:

    1 + 1

RedBaron .help() text:

    BinaryOperatorNode()
      # identifiers: binary_operator, binary_operator_, binaryoperator, binaryoperatornode
      value='+'
      first ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
      second ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value'],
     'first': <IntNode path=[0, 'first'], "1" 75857816, on BinaryOperatorNode 75857144>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75890816, on BinaryOperatorNode 75857144>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "1 + 1" 75857872, on NoneType 1961454680>,
     'second': <IntNode path=[0, 'second'], "1" 75890872, on BinaryOperatorNode 75857144>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75891152, on BinaryOperatorNode 75857144>,
     'type': 'binary_operator',
     'value': '+'}
    
*/
UCLASS()
class PROCKFPS_API BinaryOperatorNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    BinaryOperatorNode(PyObject *native) : PythonNode(native) {}
    BinaryOperatorNode() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Second();


	char *Type();
	char *Value();

};


/*
The node represents a boolean operator (an operator (e.g: :file:`and` :file:`or`) applied to 2 values) with its operands. For e.g.: :file:`x and y`.

Equivalent python:

    x and y

RedBaron .help() text:

    BooleanOperatorNode()
      # identifiers: boolean_operator, boolean_operator_, booleanoperator, booleanoperatornode
      value='and'
      first ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      second ->
        NameNode()
          # identifiers: name, name_, namenode
          value='y'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value'],
     'first': <NameNode path=[0, 'first'], "x" 75891992, on BooleanOperatorNode 75891320>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75891936, on BooleanOperatorNode 75891320>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "x and y" 75891824, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "y" 75857200, on BooleanOperatorNode 75891320>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75857256, on BooleanOperatorNode 75891320>,
     'type': 'boolean_operator',
     'value': 'and'}
    
*/
UCLASS()
class PROCKFPS_API BooleanOperatorNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    BooleanOperatorNode(PyObject *native) : PythonNode(native) {}
    BooleanOperatorNode() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Second();


	char *Type();
	char *Value();

};


/*
A node representing a call (eg: :file:`a()`, here :file:`a` is called with noarguments). It is always stored in an :ref:`AtomtrailersNode` or a:ref:`DecoratorNode`.

Equivalent python:

    a(b, c=d)

RedBaron .help() text:

    CallNode()
      # identifiers: call, call_, callnode
      value ->
        * CallArgumentNode()
            # identifiers: call_argument, call_argument_, callargument, callargumentnode
            target ->
              None
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='b'
        * CallArgumentNode()
            # identifiers: call_argument, call_argument_, callargument, callargumentnode
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='c'
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value'],
     'first': <NameNode path=[0, 'first'], "x" 75891992, on BooleanOperatorNode 75891320>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75891936, on BooleanOperatorNode 75891320>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "x and y" 75891824, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "y" 75857200, on BooleanOperatorNode 75891320>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75857256, on BooleanOperatorNode 75891320>,
     'type': 'boolean_operator',
     'value': 'and'}
    
*/
UCLASS()
class PROCKFPS_API CallNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    CallNode(PyObject *native) : PythonNode(native) {}
    CallNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an argument or a named argument of a :ref:`CallNode` (othernodes that can be in a CallNode are :ref:`ListArgumentNode` and:ref:`DictArgumentNode`).

Equivalent python:

    a(b, c=d)

RedBaron .help() text:

    CallArgumentNode()
      # identifiers: call_argument, call_argument_, callargument, callargumentnode
      target ->
        None
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target', 'value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'value', 0, 'first_formatting'], "" 75924088, on CallArgumentNode 75893280>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(b, c=d)" 75923864, on AtomtrailersNode 75891096>,
     'second_formatting': <NodeList [0, 'value', 1, 'value', 0, 'second_formatting'], "" 75924312, on CallArgumentNode 75893280>,
     'target': None,
     'type': 'call_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 75923752, on CallArgumentNode 75893280>}
    
*/
UCLASS()
class PROCKFPS_API CallArgumentNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    CallArgumentNode(PyObject *native) : PythonNode(native) {}
    CallArgumentNode() : PythonNode(nullptr) {}

	NodeBox *Target();
	NodeBox *Value();


	char *Type();

};


/*
A node representing a class definition.

Equivalent python:

    class SomeAwesomeName(A, B, C): pass

RedBaron .help() text:

    ClassNode()
      # identifiers: class, class_, classnode
      # default test value: name
      name='SomeAwesomeName'
      parenthesis=True
      decorators ->
      inherit_from ->
        * TupleNode()
            # identifiers: tuple, tuple_, tuplenode
            with_parenthesis=False
            value ->
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='A'
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='B'
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='C'
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target', 'value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'value', 0, 'first_formatting'], "" 75924088, on CallArgumentNode 75893280>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(b, c=d)" 75923864, on AtomtrailersNode 75891096>,
     'second_formatting': <NodeList [0, 'value', 1, 'value', 0, 'second_formatting'], "" 75924312, on CallArgumentNode 75893280>,
     'target': None,
     'type': 'call_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 75923752, on CallArgumentNode 75893280>}
    
*/
UCLASS()
class PROCKFPS_API ClassNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ClassNode(PyObject *native) : PythonNode(native) {}
    ClassNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a comma, this is the kind of formatting node that you mighthave to deal with if not enough high level helpers are available. They aregenerally present in call, function arguments definition and data structuresugar syntactic notation.The comma node is responsible for holding the formatting around it.

Equivalent python:

    [1, 2, 3]

RedBaron .help() text:

    CommaNode()
      # identifiers: comma, comma_, commanode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 75957304, on CommaNode 75957976>,
     'init': False,
     'on_attribute': 'value',
     'parent': <ListNode path=[0], "[1, 2, 3]" 75957584, on RedBaron 75891432>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], " " 75958088, on CommaNode 75957976>,
     'type': 'comma'}
    
*/
UCLASS()
class PROCKFPS_API CommaNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    CommaNode(PyObject *native) : PythonNode(native) {}
    CommaNode() : PythonNode(nullptr) {}


	char *Type();

};


/*
The node represents a comparison operation, for e.g.: :file:`42 > 30`.

Equivalent python:

    42 > 30

RedBaron .help() text:

    ComparisonNode()
      # identifiers: comparison, comparison_, comparisonnode
      first ->
        IntNode()
          # identifiers: int, int_, intnode
          value='42'
      value ->
        ComparisonOperatorNode()
          # identifiers: comparison_operator, comparison_operator_, comparisonoperator, comparisonoperatornode
          first='>'
          second=''
      second ->
        IntNode()
          # identifiers: int, int_, intnode
          value='30'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first': <IntNode path=[0, 'first'], "42" 75959824, on ComparisonNode 75960104>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75960216, on ComparisonNode 75960104>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "42 > 30" 75959656, on NoneType 1961454680>,
     'second': <IntNode path=[0, 'second'], "30" 75959992, on ComparisonNode 75960104>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75959712, on ComparisonNode 75960104>,
     'type': 'comparison',
     'value': <ComparisonOperatorNode path=[0, 'value'], ">" 75959208, on ComparisonNode 75960104>}
    
*/
UCLASS()
class PROCKFPS_API ComparisonNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ComparisonNode(PyObject *native) : PythonNode(native) {}
    ComparisonNode() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Value();
	NodeBox *Second();


	char *Type();

};


/*
The node represents "if" condition in a comprehension loop. It is always amember of a :ref:`ComprehensionLoopNode`.

Equivalent python:

    [x for x in x if condition]

RedBaron .help() text:

    ComprehensionIfNode()
      # identifiers: comprehension_if, comprehension_if_, comprehensionif, comprehensionifnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='condition'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'generators', 0, 'ifs', 0, 'first_formatting'], " " 75956408, on ComprehensionIfNode 75956464>,
     'init': False,
     'on_attribute': 'ifs',
     'parent': <ComprehensionLoopNode path=[0, 'generators', 0], " for x in x if c...n" 75957360, on ListComprehensionNode 75956968>,
     'second_formatting': <NodeList [0, 'generators', 0, 'ifs', 0, 'second_formatting'], " " 75956856, on ComprehensionIfNode 75956464>,
     'type': 'comprehension_if',
     'value': <NameNode path=[0, 'generators', 0, 'ifs', 0, 'value'], "condition" 75956632, on ComprehensionIfNode 75956464>}
    
*/
UCLASS()
class PROCKFPS_API ComprehensionIfNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ComprehensionIfNode(PyObject *native) : PythonNode(native) {}
    ComprehensionIfNode() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
The node represents the loop part of a comprehension structure.

Equivalent python:

    [x for y in z]

RedBaron .help() text:

    ComprehensionLoopNode()
      # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
      iterator ->
        NameNode()
          # identifiers: name, name_, namenode
          value='y'
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='z'
      ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['iterator', 'target'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'ifs'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'generators', 0, 'first_formatting'], " " 75998992, on ComprehensionLoopNode 75925880>,
     'fourth_formatting': <NodeList [0, 'generators', 0, 'fourth_formatting'], " " 76000056, on ComprehensionLoopNode 75925880>,
     'ifs': <NodeList [0, 'generators', 0, 'ifs'], "" 76000224, on ComprehensionLoopNode 75925880>,
     'init': False,
     'iterator': <NameNode path=[0, 'generators', 0, 'iterator'], "y" 75999664, on ComprehensionLoopNode 75925880>,
     'on_attribute': 'generators',
     'parent': <ListComprehensionNode path=[0], "[x for y in z]" 75925208, on RedBaron 75959320>,
     'second_formatting': <NodeList [0, 'generators', 0, 'second_formatting'], " " 75999104, on ComprehensionLoopNode 75925880>,
     'target': <NameNode path=[0, 'generators', 0, 'target'], "z" 76000168, on ComprehensionLoopNode 75925880>,
     'third_formatting': <NodeList [0, 'generators', 0, 'third_formatting'], " " 75999944, on ComprehensionLoopNode 75925880>,
     'type': 'comprehension_loop'}
    
*/
UCLASS()
class PROCKFPS_API ComprehensionLoopNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ComprehensionLoopNode(PyObject *native) : PythonNode(native) {}
    ComprehensionLoopNode() : PythonNode(nullptr) {}

	NodeBox *Iterator();
	NodeBox *Target();

	std::vector<NodeBox> Ifs();

	char *Type();

};


/*
A node representing an individual decorator (of a function or a class).

Equivalent python:

    @stuff.plop(*a)\ndef b(): pass

RedBaron .help() text:

    DecoratorNode()
      # identifiers: decorator, decorator_, decoratornode
      value ->
        DottedNameNode()
          # identifiers: dotted_name, dotted_name_, dottedname, dottednamenode
          value ->
            * NameNode()
                # identifiers: name, name_, namenode
                value='stuff'
            * DotNode()
                # identifiers: dot, dot_, dotnode
            * NameNode()
                # identifiers: name, name_, namenode
                value='plop'
      call ->
        CallNode()
          # identifiers: call, call_, callnode
          value ->
            * ListArgumentNode()
                # identifiers: list_argument, list_argument_, listargument, listargumentnode
                value ->
                  NameNode()
                    # identifiers: name, name_, namenode
                    value='a'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'call'],
     '_list_keys': [],
     '_str_keys': ['type'],
     'call': <CallNode path=[0, 'decorators', 0, 'call'], "(*a)" 76033048, on DecoratorNode 76033328>,
     'init': False,
     'on_attribute': 'decorators',
     'parent': <DefNode path=[0], "@stuff.plop(*a)\...n" 76032768, on RedBaron 75999720>,
     'type': 'decorator',
     'value': <DottedNameNode path=[0, 'decorators', 0, 'value'], "stuff.plop" 76033216, on DecoratorNode 76033328>}
    
*/
UCLASS()
class PROCKFPS_API DecoratorNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DecoratorNode(PyObject *native) : PythonNode(native) {}
    DecoratorNode() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Call();

	char *Type();

};


/*
A node representing an argument in a function definition.

Equivalent python:

    def a(b, c=d): pass

RedBaron .help() text:

    0 -----------------------------------------------------
    DefArgumentNode()
      # identifiers: def_argument, def_argument_, defargument, defargumentnode
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      value ->
        None
    1 -----------------------------------------------------
    CommaNode()
      # identifiers: comma, comma_, commanode
    2 -----------------------------------------------------
    DefArgumentNode()
      # identifiers: def_argument, def_argument_, defargument, defargumentnode
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='c'
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'call'],
     '_list_keys': [],
     '_str_keys': ['type'],
     'call': <CallNode path=[0, 'decorators', 0, 'call'], "(*a)" 76033048, on DecoratorNode 76033328>,
     'init': False,
     'on_attribute': 'decorators',
     'parent': <DefNode path=[0], "@stuff.plop(*a)\...n" 76032768, on RedBaron 75999720>,
     'type': 'decorator',
     'value': <DottedNameNode path=[0, 'decorators', 0, 'value'], "stuff.plop" 76033216, on DecoratorNode 76033328>}
    
*/
UCLASS()
class PROCKFPS_API DefArgumentNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DefArgumentNode(PyObject *native) : PythonNode(native) {}
    DefArgumentNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a :file:`del` statement.

Equivalent python:

    del stuff

RedBaron .help() text:

    DelNode()
      # identifiers: del, del_, delnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='stuff'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 76353096, on DelNode 76353264>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "del stuff" 76001120, on NoneType 1961454680>,
     'type': 'del',
     'value': <NameNode path=[0, 'value'], "stuff" 76353152, on DelNode 76353264>}
    
*/
UCLASS()
class PROCKFPS_API DelNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DelNode(PyObject *native) : PythonNode(native) {}
    DelNode() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing a 'kwargs' defined in a function definition argument orused in a :ref:`CallNode`.

Equivalent python:

    a(**b)

RedBaron .help() text:

    DictArgumentNode()
      # identifiers: dict_argument, dict_argument_, dictargument, dictargumentnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'value', 1, 'value', 0, 'formatting'], "" 76384464, on DictArgumentNode 76382560>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(**b)" 76384072, on AtomtrailersNode 76353376>,
     'type': 'dict_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 76384352, on DictArgumentNode 76382560>}
    
*/
UCLASS()
class PROCKFPS_API DictArgumentNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DictArgumentNode(PyObject *native) : PythonNode(native) {}
    DictArgumentNode() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing python sugar syntactic notation for dict.

Equivalent python:

    {'a': 1, 'b': 2, 'c': 3}

RedBaron .help() text:

    DictNode()
      # identifiers: dict, dict_, dictnode
      value ->
        * DictitemNode()
            # identifiers: dictitem, dictitem_, dictitemnode
            key ->
              StringNode()
                # identifiers: string, string_, stringnode
                value="'a'"
            value ->
              IntNode()
                # identifiers: int, int_, intnode
                value='1'
        * DictitemNode()
            # identifiers: dictitem, dictitem_, dictitemnode
            key ->
              StringNode()
                # identifiers: string, string_, stringnode
                value="'b'"
            value ->
              IntNode()
                # identifiers: int, int_, intnode
                value='2'
        * DictitemNode()
            # identifiers: dictitem, dictitem_, dictitemnode
            key ->
              StringNode()
                # identifiers: string, string_, stringnode
                value="'c'"
            value ->
              IntNode()
                # identifiers: int, int_, intnode
                value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'value', 1, 'value', 0, 'formatting'], "" 76384464, on DictArgumentNode 76382560>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(**b)" 76384072, on AtomtrailersNode 76353376>,
     'type': 'dict_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 76384352, on DictArgumentNode 76382560>}
    
*/
UCLASS()
class PROCKFPS_API DictNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DictNode(PyObject *native) : PythonNode(native) {}
    DictNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing dictionary comprehension node.

Equivalent python:

    {a: b for c in d}

RedBaron .help() text:

    DictComprehensionNode()
      # identifiers: dict_comprehension, dict_comprehension_, dictcomprehension, dictcomprehensionnode
      result ->
        DictitemNode()
          # identifiers: dictitem, dictitem_, dictitemnode
          key ->
            NameNode()
              # identifiers: name, name_, namenode
              value='a'
          value ->
            NameNode()
              # identifiers: name, name_, namenode
              value='b'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='c'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='d'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 76419648, on DictComprehensionNode 76030360>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76420936, on DictComprehensionNode 76030360>,
     'generators': <NodeList [0, 'generators'], " for c in d" 76419480, on DictComprehensionNode 76030360>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "{a: b for c in d}" 76352760, on NoneType 1961454680>,
     'result': <DictitemNode path=[0, 'result'], "a: b" 76420208, on DictComprehensionNode 76030360>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76419984, on DictComprehensionNode 76030360>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 76420264, on DictComprehensionNode 76030360>,
     'type': 'dict_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API DictComprehensionNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DictComprehensionNode(PyObject *native) : PythonNode(native) {}
    DictComprehensionNode() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing an argument to the import node.

Equivalent python:

    import a.b.c as d

RedBaron .help() text:

    DottedAsNameNode()
      # identifiers: dotted_as_name, dotted_as_name_, dottedasname, dottedasnamenode
      target='d'
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
        * NameNode()
            # identifiers: name, name_, namenode
            value='b'
        * NameNode()
            # identifiers: name, name_, namenode
            value='c'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 76419648, on DictComprehensionNode 76030360>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76420936, on DictComprehensionNode 76030360>,
     'generators': <NodeList [0, 'generators'], " for c in d" 76419480, on DictComprehensionNode 76030360>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "{a: b for c in d}" 76352760, on NoneType 1961454680>,
     'result': <DictitemNode path=[0, 'result'], "a: b" 76420208, on DictComprehensionNode 76030360>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76419984, on DictComprehensionNode 76030360>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 76420264, on DictComprehensionNode 76030360>,
     'type': 'dict_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API DottedAsNameNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DottedAsNameNode(PyObject *native) : PythonNode(native) {}
    DottedAsNameNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a dot '.', generally found in atom trailers (this kind of structure: 'variable.another_variable(call)[getitem]').This is the kind of formatting node that you might have to deal with if not enough high level helpers are available.The dot node is responsible for holding the formatting around it.

Equivalent python:

    a.b

RedBaron .help() text:

    NameNode()
      # identifiers: name, name_, namenode
      value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 76421664, on RedBaron 76031704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API DotNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    DotNode(PyObject *native) : PythonNode(native) {}
    DotNode() : PythonNode(nullptr) {}

	char *Type();
	char *Value();

};


/*
A node representing an elif statement.The ElifNode, like the :ref:`IfNode` or the :ref:`ElseNode` are stored in a :ref:`IfelseblockNode`.

Equivalent python:

    if a: pass\nelif b: pass

RedBaron .help() text:

    ElifNode()
      # identifiers: elif, elif_, elifnode
      test ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 76421664, on RedBaron 76031704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API ElifNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ElifNode(PyObject *native) : PythonNode(native) {}
    ElifNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an else statement.The ElseNode, like the :ref:`IfNode` or the :ref:`ElifNode`, is stored in a :ref:`IfelseblockNode`.

Equivalent python:

    if a: pass\nelse: pass

RedBaron .help() text:

    ElseNode()
      # identifiers: else, else_, elsenode
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 76421664, on RedBaron 76031704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API ElseNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ElseNode(PyObject *native) : PythonNode(native) {}
    ElseNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an except statement (member of a :ref:`TryNode`).

Equivalent python:

    try: pass\nexcept FooBar: pass\nexcept Exception: pass\nelse: pass\nfinally: pass\n

RedBaron .help() text:

    EndlNode()
      # identifiers: endl, endl_, endlnode
      value='\n'
      indent=''
    ExceptNode()
      # identifiers: except, except_, exceptnode
      delimiter=''
      exception ->
        NameNode()
          # identifiers: name, name_, namenode
          value='FooBar'
      target ->
        None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 76421664, on RedBaron 76031704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API ExceptNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ExceptNode(PyObject *native) : PythonNode(native) {}
    ExceptNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a exec statement.

Equivalent python:

    exec '1 + 1' in a, b

RedBaron .help() text:

    ExecNode()
      # identifiers: exec, exec_, execnode
      value ->
        StringNode()
          # identifiers: string, string_, stringnode
          value="'1 + 1'"
      globals ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      locals ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76385920, on ExecNode 76384968>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76386200, on ExecNode 76384968>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76385808, on ExecNode 76384968>,
     'globals': <NameNode path=[0, 'globals'], "a" 76385304, on ExecNode 76384968>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 76385696, on ExecNode 76384968>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 76383568, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 76382616, on ExecNode 76384968>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76385976, on ExecNode 76384968>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 76384800, on ExecNode 76384968>}
    
*/
UCLASS()
class PROCKFPS_API ExecNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ExecNode(PyObject *native) : PythonNode(native) {}
    ExecNode() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Globals();
	NodeBox *Locals();


	char *Type();

};


/*
A node representing a finally statement (member of a :ref:`TryNode`).

Equivalent python:

    try: pass\nexcept FooBar: pass\nexcept Exception: pass\nelse: pass\nfinally: pass\n").finally_.help(deep=True)

RedBaron .help() text:

    FinallyNode()
      # identifiers: finally, finally_, finallynode
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76385920, on ExecNode 76384968>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76386200, on ExecNode 76384968>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76385808, on ExecNode 76384968>,
     'globals': <NameNode path=[0, 'globals'], "a" 76385304, on ExecNode 76384968>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 76385696, on ExecNode 76384968>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 76383568, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 76382616, on ExecNode 76384968>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76385976, on ExecNode 76384968>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 76384800, on ExecNode 76384968>}
    
*/
UCLASS()
class PROCKFPS_API FinallyNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    FinallyNode(PyObject *native) : PythonNode(native) {}
    FinallyNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a for loop.

Equivalent python:

    for i in b:\n    pass

RedBaron .help() text:

    ForNode()
      # identifiers: for, for_, fornode
      iterator ->
        NameNode()
          # identifiers: name, name_, namenode
          value='i'
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      else ->
        None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76385920, on ExecNode 76384968>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76386200, on ExecNode 76384968>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76385808, on ExecNode 76384968>,
     'globals': <NameNode path=[0, 'globals'], "a" 76385304, on ExecNode 76384968>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 76385696, on ExecNode 76384968>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 76383568, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 76382616, on ExecNode 76384968>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76385976, on ExecNode 76384968>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 76384800, on ExecNode 76384968>}
    
*/
UCLASS()
class PROCKFPS_API ForNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ForNode(PyObject *native) : PythonNode(native) {}
    ForNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a "from import" statement.

Equivalent python:

    from a import b

RedBaron .help() text:

    FromImportNode()
      # identifiers: from_import, from_import_, fromimport, fromimportnode
      # helpers: full_path_modules, full_path_names, modules, names
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
      targets ->
        * NameAsNameNode()
            # identifiers: name_as_name, name_as_name_, nameasname, nameasnamenode
            value='b'
            target=''
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76385920, on ExecNode 76384968>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76386200, on ExecNode 76384968>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76385808, on ExecNode 76384968>,
     'globals': <NameNode path=[0, 'globals'], "a" 76385304, on ExecNode 76384968>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 76385696, on ExecNode 76384968>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 76383568, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 76382616, on ExecNode 76384968>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76385976, on ExecNode 76384968>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 76384800, on ExecNode 76384968>}
    
*/
UCLASS()
class PROCKFPS_API FromImportNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    FromImportNode(PyObject *native) : PythonNode(native) {}
    FromImportNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a function definition.

Equivalent python:

    def stuff():\n    pass\n

RedBaron .help() text:

    DefNode()
      # identifiers: def, def_, defnode, funcdef, funcdef_
      # default test value: name
      name='stuff'
      decorators ->
      arguments ->
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76385920, on ExecNode 76384968>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76386200, on ExecNode 76384968>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76385808, on ExecNode 76384968>,
     'globals': <NameNode path=[0, 'globals'], "a" 76385304, on ExecNode 76384968>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 76385696, on ExecNode 76384968>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 76383568, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 76382616, on ExecNode 76384968>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76385976, on ExecNode 76384968>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 76384800, on ExecNode 76384968>}
    
*/
UCLASS()
class PROCKFPS_API FuncdefNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    FuncdefNode(PyObject *native) : PythonNode(native) {}
    FuncdefNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a generator comprehension node.

Equivalent python:

    (x for y in z)

RedBaron .help() text:

    GeneratorComprehensionNode()
      # identifiers: generator_comprehension, generator_comprehension_, generatorcomprehension, generatorcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 76564016, on GeneratorComprehensionNode 76563904>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76565136, on GeneratorComprehensionNode 76563904>,
     'generators': <NodeList [0, 'generators'], " for y in z" 76564184, on GeneratorComprehensionNode 76563904>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(x for y in z)" 76383176, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 76564240, on GeneratorComprehensionNode 76563904>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76564800, on GeneratorComprehensionNode 76563904>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 76564352, on GeneratorComprehensionNode 76563904>,
     'type': 'generator_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API GeneratorComprehensionNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    GeneratorComprehensionNode(PyObject *native) : PythonNode(native) {}
    GeneratorComprehensionNode() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing a 'get item' access on a python object, in other words the'[stuff]' in 'some_object[stuff]'.

Equivalent python:

    a[b]

RedBaron .help() text:

    GetitemNode()
      # identifiers: getitem, getitem_, getitemnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 76878400, on GetitemNode 76878064>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'fourth_formatting'], "" 76878512, on GetitemNode 76878064>,
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a[b]" 76565416, on RedBaron 76566256>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], "" 76877896, on GetitemNode 76878064>,
     'third_formatting': <NodeList [0, 'value', 1, 'third_formatting'], "" 76878456, on GetitemNode 76878064>,
     'type': 'getitem',
     'value': <NameNode path=[0, 'value', 1, 'value'], "b" 76877952, on GetitemNode 76878064>}
    
*/
UCLASS()
class PROCKFPS_API GetitemNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    GetitemNode(PyObject *native) : PythonNode(native) {}
    GetitemNode() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
A node representing a global statement.

Equivalent python:

    global a

RedBaron .help() text:

    GlobalNode()
      # identifiers: global, global_, globalnode
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 76878400, on GetitemNode 76878064>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'fourth_formatting'], "" 76878512, on GetitemNode 76878064>,
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a[b]" 76565416, on RedBaron 76566256>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], "" 76877896, on GetitemNode 76878064>,
     'third_formatting': <NodeList [0, 'value', 1, 'third_formatting'], "" 76878456, on GetitemNode 76878064>,
     'type': 'getitem',
     'value': <NameNode path=[0, 'value', 1, 'value'], "b" 76877952, on GetitemNode 76878064>}
    
*/
UCLASS()
class PROCKFPS_API GlobalNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    GlobalNode(PyObject *native) : PythonNode(native) {}
    GlobalNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an if statement.The IfNode, like the :ref:`ElifNode` or the :ref:`ElseNode`, is stored in an :ref:`IfelseblockNode`.

Equivalent python:

    if a: pass

RedBaron .help() text:

    IfNode()
      # identifiers: if, if_, ifnode
      test ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 76878400, on GetitemNode 76878064>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'fourth_formatting'], "" 76878512, on GetitemNode 76878064>,
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a[b]" 76565416, on RedBaron 76566256>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], "" 76877896, on GetitemNode 76878064>,
     'third_formatting': <NodeList [0, 'value', 1, 'third_formatting'], "" 76878456, on GetitemNode 76878064>,
     'type': 'getitem',
     'value': <NameNode path=[0, 'value', 1, 'value'], "b" 76877952, on GetitemNode 76878064>}
    
*/
UCLASS()
class PROCKFPS_API IfNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    IfNode(PyObject *native) : PythonNode(native) {}
    IfNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing the conditional block composed of at least one if statement,zero or more elif statements and, at the end, an optional else statement. Allthose statements are stored in a list.

Equivalent python:

    if a: pass\nelif b: pass\nelse: pass\n

RedBaron .help() text:

    IfelseblockNode()
      # identifiers: ifelseblock, ifelseblock_, ifelseblocknode
      value ->
        * IfNode()
            # identifiers: if, if_, ifnode
            test ->
              NameNode()
                # identifiers: name, name_, namenode
                value='a'
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
        * ElifNode()
            # identifiers: elif, elif_, elifnode
            test ->
              NameNode()
                # identifiers: name, name_, namenode
                value='b'
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
        * ElseNode()
            # identifiers: else, else_, elsenode
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['value'],
     '_str_keys': ['type'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "if a: pass\nelif...n" 76878792, on NoneType 1961454680>,
     'type': 'ifelseblock',
     'value': <NodeList [0, 'value'], "if a: pass\nelif...n" 76919976, on IfelseblockNode 76563960>}
    
*/
UCLASS()
class PROCKFPS_API IfelseblockNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    IfelseblockNode(PyObject *native) : PythonNode(native) {}
    IfelseblockNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> Value();

	char *Type();

};


/*
A node representing the import statement of the python language.*Be careful, this node and its subnodes are way more complex than what you canexpect*.

Equivalent python:

    import foo

RedBaron .help() text:

    ImportNode()
      # identifiers: import, import_, importnode
      # helpers: modules, names
      value ->
        * DottedAsNameNode()
            # identifiers: dotted_as_name, dotted_as_name_, dottedasname, dottedasnamenode
            target=''
            value ->
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='foo'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['value'],
     '_str_keys': ['type'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "if a: pass\nelif...n" 76878792, on NoneType 1961454680>,
     'type': 'ifelseblock',
     'value': <NodeList [0, 'value'], "if a: pass\nelif...n" 76919976, on IfelseblockNode 76563960>}
    
*/
UCLASS()
class PROCKFPS_API ImportNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ImportNode(PyObject *native) : PythonNode(native) {}
    ImportNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a lambda statement.

Equivalent python:

    lambda x: y

RedBaron .help() text:

    IntNode()
      # identifiers: int, int_, intnode
      value='42'
    LambdaNode()
      # identifiers: lambda, lambda_, lambdanode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='y'
      arguments ->
        * DefArgumentNode()
            # identifiers: def_argument, def_argument_, defargument, defargumentnode
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='x'
            value ->
              None
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'arguments',
                    'second_formatting',
                    'third_formatting'],
     '_str_keys': ['type'],
     'arguments': <CommaProxyList [0, 'arguments'], "x" 76880864, on LambdaNode 76880696>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76879128, on LambdaNode 76880696>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "lambda x: y" 76879408, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76535400, on LambdaNode 76880696>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76534784, on LambdaNode 76880696>,
     'type': 'lambda',
     'value': <NameNode path=[0, 'value'], "y" 76535344, on LambdaNode 76880696>}
    
*/
UCLASS()
class PROCKFPS_API LambdaNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    LambdaNode(PyObject *native) : PythonNode(native) {}
    LambdaNode() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Arguments();

	char *Type();

};


/*
A node representing a "start argument" in a function call **or** definition.

Equivalent python:

    def a(*b): pass

RedBaron .help() text:

    ListArgumentNode()
      # identifiers: list_argument, list_argument_, listargument, listargumentnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'arguments', 0, 'formatting'], "" 76950440, on ListArgumentNode 76565976>,
     'init': False,
     'on_attribute': 'arguments',
     'parent': <DefNode path=[0], "def a(*b): pass\n" 76949656, on RedBaron 76879464>,
     'type': 'list_argument',
     'value': <NameNode path=[0, 'arguments', 0, 'value'], "b" 76950496, on ListArgumentNode 76565976>}
    
*/
UCLASS()
class PROCKFPS_API ListArgumentNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ListArgumentNode(PyObject *native) : PythonNode(native) {}
    ListArgumentNode() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing a list comprehension node.

Equivalent python:

    [x for y in z]

RedBaron .help() text:

    ListComprehensionNode()
      # identifiers: list_comprehension, list_comprehension_, listcomprehension, listcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 76986576, on ListComprehensionNode 76984616>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76986912, on ListComprehensionNode 76984616>,
     'generators': <NodeList [0, 'generators'], " for y in z" 76985848, on ListComprehensionNode 76984616>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "[x for y in z]" 76949992, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 76986632, on ListComprehensionNode 76984616>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76986072, on ListComprehensionNode 76984616>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 76986016, on ListComprehensionNode 76984616>,
     'type': 'list_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API ListComprehensionNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ListComprehensionNode(PyObject *native) : PythonNode(native) {}
    ListComprehensionNode() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing python sugar syntactic notation for list.

Equivalent python:

    [1, 2, 3]

RedBaron .help() text:

    ListNode()
      # identifiers: list, list_, listnode
      value ->
        * IntNode()
            # identifiers: int, int_, intnode
            value='1'
        * IntNode()
            # identifiers: int, int_, intnode
            value='2'
        * IntNode()
            # identifiers: int, int_, intnode
            value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 76986576, on ListComprehensionNode 76984616>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76986912, on ListComprehensionNode 76984616>,
     'generators': <NodeList [0, 'generators'], " for y in z" 76985848, on ListComprehensionNode 76984616>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "[x for y in z]" 76949992, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 76986632, on ListComprehensionNode 76984616>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76986072, on ListComprehensionNode 76984616>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 76986016, on ListComprehensionNode 76984616>,
     'type': 'list_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API ListNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ListNode(PyObject *native) : PythonNode(native) {}
    ListNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an argument to the from import statement.

Equivalent python:

    from x import a as d

RedBaron .help() text:

    NameAsNameNode()
      # identifiers: name_as_name, name_as_name_, nameasname, nameasnamenode
      value='a'
      target='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value', 'target'],
     'first_formatting': [' '],
     'init': False,
     'on_attribute': 'targets',
     'parent': <FromImportNode path=[0], "from x import a as d" 76985232, on RedBaron 76948032>,
     'second_formatting': [' '],
     'target': 'd',
     'type': 'name_as_name',
     'value': 'a'}
    
*/
UCLASS()
class PROCKFPS_API NameAsNameNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    NameAsNameNode(PyObject *native) : PythonNode(native) {}
    NameAsNameNode() : PythonNode(nullptr) {}


	char *Type();
	char *Value();
	char *Target();

};


/*
A node representing a print statement.

Equivalent python:

    print(stuff)

RedBaron .help() text:

    PrintNode()
      # identifiers: print, print_, printnode
      destination ->
        None
      value ->
        * AssociativeParenthesisNode()
            # identifiers: associative_parenthesis, associative_parenthesis_, associativeparenthesis, associativeparenthesisnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='stuff'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value', 'target'],
     'first_formatting': [' '],
     'init': False,
     'on_attribute': 'targets',
     'parent': <FromImportNode path=[0], "from x import a as d" 76985232, on RedBaron 76948032>,
     'second_formatting': [' '],
     'target': 'd',
     'type': 'name_as_name',
     'value': 'a'}
    
*/
UCLASS()
class PROCKFPS_API PrintNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PrintNode(PyObject *native) : PythonNode(native) {}
    PrintNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a raise statement.

Equivalent python:

    raise Exception(), foo, bar

RedBaron .help() text:

    RaiseNode()
      # identifiers: raise, raise_, raisenode
      value ->
        AtomtrailersNode()
          # identifiers: atomtrailers, atomtrailers_, atomtrailersnode
          value ->
            * NameNode()
                # identifiers: name, name_, namenode
                value='Exception'
            * CallNode()
                # identifiers: call, call_, callnode
                value ->
      instance ->
        NameNode()
          # identifiers: name, name_, namenode
          value='foo'
      traceback ->
        NameNode()
          # identifiers: name, name_, namenode
          value='bar'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'instance', 'traceback'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76878568, on RaiseNode 76987752>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76987976, on RaiseNode 76987752>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76878680, on RaiseNode 76987752>,
     'init': False,
     'instance': <NameNode path=[0, 'instance'], "foo" 76881424, on RaiseNode 76987752>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "raise Exception(...r" 77020520, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76987696, on RaiseNode 76987752>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76918968, on RaiseNode 76987752>,
     'traceback': <NameNode path=[0, 'traceback'], "bar" 76881368, on RaiseNode 76987752>,
     'type': 'raise',
     'value': <AtomtrailersNode path=[0, 'value'], "Exception()" 76988200, on RaiseNode 76987752>}
    
*/
UCLASS()
class PROCKFPS_API RaiseNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    RaiseNode(PyObject *native) : PythonNode(native) {}
    RaiseNode() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Instance();
	NodeBox *Traceback();


	char *Type();

};


/*
A node representing python sugar syntactic notation for repr.

Equivalent python:

    `pouet`

RedBaron .help() text:

    ReprNode()
      # identifiers: repr, repr_, reprnode
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='pouet'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'instance', 'traceback'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 76878568, on RaiseNode 76987752>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 76987976, on RaiseNode 76987752>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 76878680, on RaiseNode 76987752>,
     'init': False,
     'instance': <NameNode path=[0, 'instance'], "foo" 76881424, on RaiseNode 76987752>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "raise Exception(...r" 77020520, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 76987696, on RaiseNode 76987752>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 76918968, on RaiseNode 76987752>,
     'traceback': <NameNode path=[0, 'traceback'], "bar" 76881368, on RaiseNode 76987752>,
     'type': 'raise',
     'value': <AtomtrailersNode path=[0, 'value'], "Exception()" 76988200, on RaiseNode 76987752>}
    
*/
UCLASS()
class PROCKFPS_API ReprNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ReprNode(PyObject *native) : PythonNode(native) {}
    ReprNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a return statement.

Equivalent python:

    return stuff

RedBaron .help() text:

    ReturnNode()
      # identifiers: return, return_, returnnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='stuff'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 77020240, on ReturnNode 77020464>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "return stuff" 77019176, on NoneType 1961454680>,
     'type': 'return',
     'value': <NameNode path=[0, 'value'], "stuff" 77018952, on ReturnNode 77020464>}
    
*/
UCLASS()
class PROCKFPS_API ReturnNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    ReturnNode(PyObject *native) : PythonNode(native) {}
    ReturnNode() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing python sugar syntactic notation for set.

Equivalent python:

    {1, 2, 3}

RedBaron .help() text:

    SetNode()
      # identifiers: set, set_, setnode
      value ->
        * IntNode()
            # identifiers: int, int_, intnode
            value='1'
        * IntNode()
            # identifiers: int, int_, intnode
            value='2'
        * IntNode()
            # identifiers: int, int_, intnode
            value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 77020240, on ReturnNode 77020464>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "return stuff" 77019176, on NoneType 1961454680>,
     'type': 'return',
     'value': <NameNode path=[0, 'value'], "stuff" 77018952, on ReturnNode 77020464>}
    
*/
UCLASS()
class PROCKFPS_API SetNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    SetNode(PyObject *native) : PythonNode(native) {}
    SetNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a set comprehension node.

Equivalent python:

    {x for y in z}

RedBaron .help() text:

    SetComprehensionNode()
      # identifiers: set_comprehension, set_comprehension_, setcomprehension, setcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 77065968, on SetComprehensionNode 77064176>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 77095264, on SetComprehensionNode 77064176>,
     'generators': <NodeList [0, 'generators'], " for y in z" 77065464, on SetComprehensionNode 77064176>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "{x for y in z}" 77065296, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 77066024, on SetComprehensionNode 77064176>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 77065800, on SetComprehensionNode 77064176>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 77065576, on SetComprehensionNode 77064176>,
     'type': 'set_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API SetComprehensionNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    SetComprehensionNode(PyObject *native) : PythonNode(native) {}
    SetComprehensionNode() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing a slice, the "1:2:3" that can be found in a:ref:`GetitemNode`.

Equivalent python:

    a[1:-1:2]

RedBaron .help() text:

    SliceNode()
      # identifiers: slice, slice_, slicenode
      has_two_colons=True
      lower ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
      upper ->
        UnitaryOperatorNode()
          # identifiers: unitary_operator, unitary_operator_, unitaryoperator, unitaryoperatornode
          value='-'
          target ->
            IntNode()
              # identifiers: int, int_, intnode
              value='1'
      step ->
        IntNode()
          # identifiers: int, int_, intnode
          value='2'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['lower', 'upper', 'step'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type', 'has_two_colons'],
     'first_formatting': <NodeList [0, 'value', 1, 'value', 'first_formatting'], "" 77017216, on SliceNode 77021136>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'value', 'fourth_formatting'], "" 77018728, on SliceNode 77021136>,
     'has_two_colons': True,
     'init': False,
     'lower': <IntNode path=[0, 'value', 1, 'value', 'lower'], "1" 77018672, on SliceNode 77021136>,
     'on_attribute': 'value',
     'parent': <GetitemNode path=[0, 'value', 1], "[1:-1:2]" 77017272, on AtomtrailersNode 76985680>,
     'second_formatting': <NodeList [0, 'value', 1, 'value', 'second_formatting'], "" 77018000, on SliceNode 77021136>,
     'step': <IntNode path=[0, 'value', 1, 'value', 'step'], "2" 77019288, on SliceNode 77021136>,
     'third_formatting': <NodeList [0, 'value', 1, 'value', 'third_formatting'], "" 77018112, on SliceNode 77021136>,
     'type': 'slice',
     'upper': <UnitaryOperatorNode path=[0, 'value', 1, 'value', 'upper'], "-1" 77020128, on SliceNode 77021136>}
    
*/
UCLASS()
class PROCKFPS_API SliceNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    SliceNode(PyObject *native) : PythonNode(native) {}
    SliceNode() : PythonNode(nullptr) {}

	NodeBox *Lower();
	NodeBox *Upper();
	NodeBox *Step();


	char *Type();
	char *HasTwoColons();

};


/*
This is a special node that handle a particular way of writing a single string inpython by putting several strings one after the other while only separated byspaces or endls.

Equivalent python:

    'a' r'b' b'c'

RedBaron .help() text:

    SpaceNode()
      # identifiers: space, space_, spacenode
      value=' '
    StringChainNode()
      # identifiers: string_chain, string_chain_, stringchain, stringchainnode
      value ->
        * StringNode()
            # identifiers: string, string_, stringnode
            value="'a'"
        * RawStringNode()
            # identifiers: raw_string, raw_string_, rawstring, rawstringnode
            value="r'b'"
        * BinaryStringNode()
            # identifiers: binary_string, binary_string_, binarystring, binarystringnode
            value="b'c'"
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['value'],
     '_str_keys': ['type'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "'a' r'b' b'c'" 76920200, on NoneType 1961454680>,
     'type': 'string_chain',
     'value': <NodeList [0, 'value'], "'a' r'b' b'c'" 77096104, on StringChainNode 77097280>}
    
*/
UCLASS()
class PROCKFPS_API StringChainNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    StringChainNode(PyObject *native) : PythonNode(native) {}
    StringChainNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> Value();

	char *Type();

};


/*
A node representing the ternary operator expression.

Equivalent python:

    a if b else c

RedBaron .help() text:

    TernaryOperatorNode()
      # identifiers: ternary_operator, ternary_operator_, ternaryoperator, ternaryoperatornode
      first ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      second ->
        NameNode()
          # identifiers: name, name_, namenode
          value='c'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first': <NameNode path=[0, 'first'], "a" 77098792, on TernaryOperatorNode 77097840>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 77098904, on TernaryOperatorNode 77097840>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], " " 77136224, on TernaryOperatorNode 77097840>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "a if b else c" 77098568, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "c" 77136336, on TernaryOperatorNode 77097840>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 77135944, on TernaryOperatorNode 77097840>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 77136112, on TernaryOperatorNode 77097840>,
     'type': 'ternary_operator',
     'value': <NameNode path=[0, 'value'], "b" 77136056, on TernaryOperatorNode 77097840>}
    
*/
UCLASS()
class PROCKFPS_API TernaryOperatorNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    TernaryOperatorNode(PyObject *native) : PythonNode(native) {}
    TernaryOperatorNode() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Value();
	NodeBox *Second();


	char *Type();

};


/*
A node representing a try statement. This node is responsible for holding the:ref:`ExceptNode`, :ref:`FinallyNode` and :ref:`ElseNode`.

Equivalent python:

    try: pass\nexcept FooBar: pass\nexcept Exception: pass\nelse: pass\nfinally: pass\n

RedBaron .help() text:

    TryNode()
      # identifiers: try, try_, trynode
      else ->
        ElseNode()
          # identifiers: else, else_, elsenode
          value ->
            * PassNode()
                # identifiers: pass, pass_, passnode
      finally ->
        FinallyNode()
          # identifiers: finally, finally_, finallynode
          value ->
            * PassNode()
                # identifiers: pass, pass_, passnode
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
      excepts ->
        * ExceptNode()
            # identifiers: except, except_, exceptnode
            delimiter=''
            exception ->
              NameNode()
                # identifiers: name, name_, namenode
                value='FooBar'
            target ->
              None
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
        * ExceptNode()
            # identifiers: except, except_, exceptnode
            delimiter=''
            exception ->
              NameNode()
                # identifiers: name, name_, namenode
                value='Exception'
            target ->
              None
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first': <NameNode path=[0, 'first'], "a" 77098792, on TernaryOperatorNode 77097840>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 77098904, on TernaryOperatorNode 77097840>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], " " 77136224, on TernaryOperatorNode 77097840>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "a if b else c" 77098568, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "c" 77136336, on TernaryOperatorNode 77097840>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 77135944, on TernaryOperatorNode 77097840>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 77136112, on TernaryOperatorNode 77097840>,
     'type': 'ternary_operator',
     'value': <NameNode path=[0, 'value'], "b" 77136056, on TernaryOperatorNode 77097840>}
    
*/
UCLASS()
class PROCKFPS_API TryNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    TryNode(PyObject *native) : PythonNode(native) {}
    TryNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing python sugar syntactic notation for tuple.

Equivalent python:

    (1, 2, 3)

RedBaron .help() text:

    TupleNode()
      # identifiers: tuple, tuple_, tuplenode
      with_parenthesis=True
      value ->
        * IntNode()
            # identifiers: int, int_, intnode
            value='1'
        * IntNode()
            # identifiers: int, int_, intnode
            value='2'
        * IntNode()
            # identifiers: int, int_, intnode
            value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first': <NameNode path=[0, 'first'], "a" 77098792, on TernaryOperatorNode 77097840>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 77098904, on TernaryOperatorNode 77097840>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], " " 77136224, on TernaryOperatorNode 77097840>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "a if b else c" 77098568, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "c" 77136336, on TernaryOperatorNode 77097840>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 77135944, on TernaryOperatorNode 77097840>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 77136112, on TernaryOperatorNode 77097840>,
     'type': 'ternary_operator',
     'value': <NameNode path=[0, 'value'], "b" 77136056, on TernaryOperatorNode 77097840>}
    
*/
UCLASS()
class PROCKFPS_API TupleNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    TupleNode(PyObject *native) : PythonNode(native) {}
    TupleNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a number sign modification operator like :file:`-2` or :file:`+42`.

Equivalent python:

    -1

RedBaron .help() text:

    UnitaryOperatorNode()
      # identifiers: unitary_operator, unitary_operator_, unitaryoperator, unitaryoperatornode
      value='-'
      target ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type', 'value'],
     'formatting': <NodeList [0, 'formatting'], "" 77199736, on UnitaryOperatorNode 77199456>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "-1" 77199176, on NoneType 1961454680>,
     'target': <IntNode path=[0, 'target'], "1" 77198056, on UnitaryOperatorNode 77199456>,
     'type': 'unitary_operator',
     'value': '-'}
    
*/
UCLASS()
class PROCKFPS_API UnitaryOperatorNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    UnitaryOperatorNode(PyObject *native) : PythonNode(native) {}
    UnitaryOperatorNode() : PythonNode(nullptr) {}

	NodeBox *Target();

	std::vector<NodeBox> Formatting();

	char *Type();
	char *Value();

};


/*
A node representing a yield statement.

Equivalent python:

    yield 42

RedBaron .help() text:

    YieldNode()
      # identifiers: yield, yield_, yieldnode
      value ->
        IntNode()
          # identifiers: int, int_, intnode
          value='42'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 77171176, on YieldNode 77171624>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "yield 42" 77171736, on NoneType 1961454680>,
     'type': 'yield',
     'value': <IntNode path=[0, 'value'], "42" 77171456, on YieldNode 77171624>}
    
*/
UCLASS()
class PROCKFPS_API YieldNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    YieldNode(PyObject *native) : PythonNode(native) {}
    YieldNode() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing a yield statement surrounded by parenthesis.

Equivalent python:

    (yield 42)

RedBaron .help() text:

    YieldAtomNode()
      # identifiers: yield_atom, yield_atom_, yieldatom, yieldatomnode
      value ->
        IntNode()
          # identifiers: int, int_, intnode
          value='42'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting', 'second_formatting', 'third_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 77170056, on YieldAtomNode 77170896>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(yield 42)" 77170952, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 77169216, on YieldAtomNode 77170896>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 77169104, on YieldAtomNode 77170896>,
     'type': 'yield_atom',
     'value': <IntNode path=[0, 'value'], "42" 77172072, on YieldAtomNode 77170896>}
    
*/
UCLASS()
class PROCKFPS_API YieldAtomNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    YieldAtomNode(PyObject *native) : PythonNode(native) {}
    YieldAtomNode() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
A node representing a while loop.

Equivalent python:

    while condition:\n    pass

RedBaron .help() text:

    WhileNode()
      # identifiers: while, while_, whilenode
      test ->
        NameNode()
          # identifiers: name, name_, namenode
          value='condition'
      else ->
        None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting', 'second_formatting', 'third_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 77170056, on YieldAtomNode 77170896>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(yield 42)" 77170952, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 77169216, on YieldAtomNode 77170896>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 77169104, on YieldAtomNode 77170896>,
     'type': 'yield_atom',
     'value': <IntNode path=[0, 'value'], "42" 77172072, on YieldAtomNode 77170896>}
    
*/
UCLASS()
class PROCKFPS_API WhileNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    WhileNode(PyObject *native) : PythonNode(native) {}
    WhileNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a while loop.

Equivalent python:

    with a as b: pass

RedBaron .help() text:

    WithContextItemNode()
      # identifiers: with_context_item, with_context_item_, withcontextitem, withcontextitemnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      as ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'as'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'as': <NameNode path=[0, 'contexts', 0, 'as'], "b" 77244512, on WithContextItemNode 77201080>,
     'first_formatting': <NodeList [0, 'contexts', 0, 'first_formatting'], " " 77243896, on WithContextItemNode 77201080>,
     'init': False,
     'on_attribute': 'contexts',
     'parent': <WithNode path=[0], "with a as b: pass\n" 77243728, on RedBaron 77199960>,
     'second_formatting': <NodeList [0, 'contexts', 0, 'second_formatting'], " " 77243784, on WithContextItemNode 77201080>,
     'type': 'with_context_item',
     'value': <NameNode path=[0, 'contexts', 0, 'value'], "a" 77244008, on WithContextItemNode 77201080>}
    
*/
UCLASS()
class PROCKFPS_API WithContextItemNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    WithContextItemNode(PyObject *native) : PythonNode(native) {}
    WithContextItemNode() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *As();


	char *Type();

};


/*
A node representing a with statement.

Equivalent python:

    with a as b, c: pass

RedBaron .help() text:

    WithNode()
      # identifiers: with, with_, withnode
      contexts ->
        * WithContextItemNode()
            # identifiers: with_context_item, with_context_item_, withcontextitem, withcontextitemnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='a'
            as ->
              NameNode()
                # identifiers: name, name_, namenode
                value='b'
        * WithContextItemNode()
            # identifiers: with_context_item, with_context_item_, withcontextitem, withcontextitemnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='c'
            as ->
              None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'as'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'as': <NameNode path=[0, 'contexts', 0, 'as'], "b" 77244512, on WithContextItemNode 77201080>,
     'first_formatting': <NodeList [0, 'contexts', 0, 'first_formatting'], " " 77243896, on WithContextItemNode 77201080>,
     'init': False,
     'on_attribute': 'contexts',
     'parent': <WithNode path=[0], "with a as b: pass\n" 77243728, on RedBaron 77199960>,
     'second_formatting': <NodeList [0, 'contexts', 0, 'second_formatting'], " " 77243784, on WithContextItemNode 77201080>,
     'type': 'with_context_item',
     'value': <NameNode path=[0, 'contexts', 0, 'value'], "a" 77244008, on WithContextItemNode 77201080>}
    
*/
UCLASS()
class PROCKFPS_API WithNode : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    WithNode(PyObject *native) : PythonNode(native) {}
    WithNode() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


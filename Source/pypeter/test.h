
/*
 * This file is dynamically generated by a python script based on AST node documentation from RedBaron.
 * 
 * DO NOT EDIT THIS FILE DIRECTLY.
 *
 * The classes defined here inherit from BoxActor, which is responsible for implementation, and PythonNode, 
 * which is responsible for interfacing with python AST nodes. Edit those classes to add functionality. 
 */

#pragma once

#include "GameFramework/Actor.h"
#include "BoxActor.h"
#include "NodeBox.generated.h"



/*
A node representing generator passed as an argument during a function call.

Equivalent python:

    a(x for y in z)

RedBaron .help() text:

    ArgumentGeneratorComprehensionNode()
      # identifiers: argument_generator_comprehension, argument_generator_comprehension_, argumentgeneratorcomprehension, argumentgeneratorcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['generators'],
     '_str_keys': ['type'],
     'generators': <NodeList [0, 'value', 1, 'value', 0, 'generators'], " for y in z" 70659152, on ArgumentGeneratorComprehensionNode 70659488>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(x for y in z)" 70659768, on AtomtrailersNode 70602480>,
     'result': <NameNode path=[0, 'value', 1, 'value', 0, 'result'], "x" 70659656, on ArgumentGeneratorComprehensionNode 70659488>,
     'type': 'argument_generator_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNArgumentGeneratorComprehension : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNArgumentGeneratorComprehension(PyObject *native) : PythonNode(native) {}
    PNArgumentGeneratorComprehension() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing the assert statement.

Equivalent python:

    assert test, message

RedBaron .help() text:

    AssertNode()
      # identifiers: assert, assert_, assertnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='test'
      message ->
        NameNode()
          # identifiers: name, name_, namenode
          value='message'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'message'],
     '_list_keys': ['first_formatting', 'second_formatting', 'third_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], " " 70797520, on AssertNode 70797688>,
     'init': False,
     'message': <NameNode path=[0, 'message'], "message" 70797464, on AssertNode 70797688>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "assert test, message" 70797352, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 70797744, on AssertNode 70797688>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 70797800, on AssertNode 70797688>,
     'type': 'assert',
     'value': <NameNode path=[0, 'value'], "test" 70797968, on AssertNode 70797688>}
    
*/
UCLASS()
class PROCKFPS_API PNAssert : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNAssert(PyObject *native) : PythonNode(native) {}
    PNAssert() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Message();


	char *Type();

};


/*
A node representing the assign operation in python (:file:`foo = bar`) and the"augmented" assign (:file:`foo += bar`).

Equivalent python:

    a = b

RedBaron .help() text:

    AssignmentNode()
      # identifiers: assign, assignment, assignment_, assignmentnode
      operator=''
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target', 'value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'operator'],
     'first_formatting': <NodeList [0, 'first_formatting'], " " 70656856, on AssignmentNode 70657248>,
     'init': False,
     'on_attribute': 'root',
     'operator': '',
     'parent': <RedBaron [], "a = b" 70656688, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 70657472, on AssignmentNode 70657248>,
     'target': <NameNode path=[0, 'target'], "a" 70656912, on AssignmentNode 70657248>,
     'type': 'assignment',
     'value': <NameNode path=[0, 'value'], "b" 70657024, on AssignmentNode 70657248>}
    
*/
UCLASS()
class PROCKFPS_API PNAssignment : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNAssignment(PyObject *native) : PythonNode(native) {}
    PNAssignment() : PythonNode(nullptr) {}

	NodeBox *Target();
	NodeBox *Value();


	char *Type();
	char *Operator();

};


/*
This node represents a statement prioritised on another by being surrounded byparenthesis. For e.g., the first part of this addition: :file:`(1 + 1) * 2`.

Equivalent python:

    (foo)

RedBaron .help() text:

    AssociativeParenthesisNode()
      # identifiers: associative_parenthesis, associative_parenthesis_, associativeparenthesis, associativeparenthesisnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='foo'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 70657808, on AssociativeParenthesisNode 70657360>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 70797576, on AssociativeParenthesisNode 70657360>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(foo)" 64703176, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 70659992, on AssociativeParenthesisNode 70657360>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 70657304, on AssociativeParenthesisNode 70657360>,
     'type': 'associative_parenthesis',
     'value': <NameNode path=[0, 'value'], "foo" 70656184, on AssociativeParenthesisNode 70657360>}
    
*/
UCLASS()
class PROCKFPS_API PNAssociativeParenthesis : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNAssociativeParenthesis(PyObject *native) : PythonNode(native) {}
    PNAssociativeParenthesis() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
This node represents a combination of :ref:`NameNode`, :ref:`DotNode`,:ref:`CallNode`, :ref:`GetitemNode` sorted in a list. For e.g.::file:`a.b().c[d]`.

Equivalent python:

    a.b().c[d]

RedBaron .help() text:

    AtomtrailersNode()
      # identifiers: atomtrailers, atomtrailers_, atomtrailersnode
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
        * NameNode()
            # identifiers: name, name_, namenode
            value='b'
        * CallNode()
            # identifiers: call, call_, callnode
            value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='c'
        * GetitemNode()
            # identifiers: getitem, getitem_, getitemnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 70657808, on AssociativeParenthesisNode 70657360>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 70797576, on AssociativeParenthesisNode 70657360>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(foo)" 64703176, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 70659992, on AssociativeParenthesisNode 70657360>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 70657304, on AssociativeParenthesisNode 70657360>,
     'type': 'associative_parenthesis',
     'value': <NameNode path=[0, 'value'], "foo" 70656184, on AssociativeParenthesisNode 70657360>}
    
*/
UCLASS()
class PROCKFPS_API PNAtomtrailers : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNAtomtrailers(PyObject *native) : PythonNode(native) {}
    PNAtomtrailers() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
The node represents a binary number value.

Equivalent python:

    0b10101

RedBaron .help() text:

    BinaryNode()
      # identifiers: binary, binary_, binarynode
      value='0b10101'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "0b10101" 70831296, on NoneType 1961454680>,
     'type': 'binary',
     'value': '0b10101'}
    
*/
UCLASS()
class PROCKFPS_API PNBinary : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNBinary(PyObject *native) : PythonNode(native) {}
    PNBinary() : PythonNode(nullptr) {}

	char *Type();
	char *Value();

};


/*
The node represents a binary operator (an operator (e.g: :file:`+` :file:`-` :file:`/`..) applied to 2 values) with its operands. For e.g.: :file:`1 + 1`.

Equivalent python:

    1 + 1

RedBaron .help() text:

    BinaryOperatorNode()
      # identifiers: binary_operator, binary_operator_, binaryoperator, binaryoperatornode
      value='+'
      first ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
      second ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value'],
     'first': <IntNode path=[0, 'first'], "1" 70832024, on BinaryOperatorNode 70831352>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 70865024, on BinaryOperatorNode 70831352>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "1 + 1" 70832080, on NoneType 1961454680>,
     'second': <IntNode path=[0, 'second'], "1" 70865080, on BinaryOperatorNode 70831352>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 70865360, on BinaryOperatorNode 70831352>,
     'type': 'binary_operator',
     'value': '+'}
    
*/
UCLASS()
class PROCKFPS_API PNBinaryOperator : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNBinaryOperator(PyObject *native) : PythonNode(native) {}
    PNBinaryOperator() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Second();


	char *Type();
	char *Value();

};


/*
The node represents a boolean operator (an operator (e.g: :file:`and` :file:`or`) applied to 2 values) with its operands. For e.g.: :file:`x and y`.

Equivalent python:

    x and y

RedBaron .help() text:

    BooleanOperatorNode()
      # identifiers: boolean_operator, boolean_operator_, booleanoperator, booleanoperatornode
      value='and'
      first ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      second ->
        NameNode()
          # identifiers: name, name_, namenode
          value='y'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value'],
     'first': <NameNode path=[0, 'first'], "x" 70866200, on BooleanOperatorNode 70865528>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 70866144, on BooleanOperatorNode 70865528>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "x and y" 70866032, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "y" 70831408, on BooleanOperatorNode 70865528>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 70831464, on BooleanOperatorNode 70865528>,
     'type': 'boolean_operator',
     'value': 'and'}
    
*/
UCLASS()
class PROCKFPS_API PNBooleanOperator : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNBooleanOperator(PyObject *native) : PythonNode(native) {}
    PNBooleanOperator() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Second();


	char *Type();
	char *Value();

};


/*
A node representing a call (eg: :file:`a()`, here :file:`a` is called with noarguments). It is always stored in an :ref:`AtomtrailersNode` or a:ref:`DecoratorNode`.

Equivalent python:

    a(b, c=d)

RedBaron .help() text:

    CallNode()
      # identifiers: call, call_, callnode
      value ->
        * CallArgumentNode()
            # identifiers: call_argument, call_argument_, callargument, callargumentnode
            target ->
              None
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='b'
        * CallArgumentNode()
            # identifiers: call_argument, call_argument_, callargument, callargumentnode
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='c'
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value'],
     'first': <NameNode path=[0, 'first'], "x" 70866200, on BooleanOperatorNode 70865528>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 70866144, on BooleanOperatorNode 70865528>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "x and y" 70866032, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "y" 70831408, on BooleanOperatorNode 70865528>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 70831464, on BooleanOperatorNode 70865528>,
     'type': 'boolean_operator',
     'value': 'and'}
    
*/
UCLASS()
class PROCKFPS_API PNCall : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNCall(PyObject *native) : PythonNode(native) {}
    PNCall() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an argument or a named argument of a :ref:`CallNode` (othernodes that can be in a CallNode are :ref:`ListArgumentNode` and:ref:`DictArgumentNode`).

Equivalent python:

    a(b, c=d)

RedBaron .help() text:

    CallArgumentNode()
      # identifiers: call_argument, call_argument_, callargument, callargumentnode
      target ->
        None
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target', 'value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'value', 0, 'first_formatting'], "" 70898296, on CallArgumentNode 70867488>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(b, c=d)" 70898072, on AtomtrailersNode 70865304>,
     'second_formatting': <NodeList [0, 'value', 1, 'value', 0, 'second_formatting'], "" 70898520, on CallArgumentNode 70867488>,
     'target': None,
     'type': 'call_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 70897960, on CallArgumentNode 70867488>}
    
*/
UCLASS()
class PROCKFPS_API PNCallArgument : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNCallArgument(PyObject *native) : PythonNode(native) {}
    PNCallArgument() : PythonNode(nullptr) {}

	NodeBox *Target();
	NodeBox *Value();


	char *Type();

};


/*
A node representing a class definition.

Equivalent python:

    class SomeAwesomeName(A, B, C): pass

RedBaron .help() text:

    ClassNode()
      # identifiers: class, class_, classnode
      # default test value: name
      name='SomeAwesomeName'
      parenthesis=True
      decorators ->
      inherit_from ->
        * TupleNode()
            # identifiers: tuple, tuple_, tuplenode
            with_parenthesis=False
            value ->
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='A'
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='B'
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='C'
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target', 'value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'value', 0, 'first_formatting'], "" 70898296, on CallArgumentNode 70867488>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(b, c=d)" 70898072, on AtomtrailersNode 70865304>,
     'second_formatting': <NodeList [0, 'value', 1, 'value', 0, 'second_formatting'], "" 70898520, on CallArgumentNode 70867488>,
     'target': None,
     'type': 'call_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 70897960, on CallArgumentNode 70867488>}
    
*/
UCLASS()
class PROCKFPS_API PNClass : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNClass(PyObject *native) : PythonNode(native) {}
    PNClass() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a comma, this is the kind of formatting node that you mighthave to deal with if not enough high level helpers are available. They aregenerally present in call, function arguments definition and data structuresugar syntactic notation.The comma node is responsible for holding the formatting around it.

Equivalent python:

    [1, 2, 3]

RedBaron .help() text:

    CommaNode()
      # identifiers: comma, comma_, commanode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 70931512, on CommaNode 70932184>,
     'init': False,
     'on_attribute': 'value',
     'parent': <ListNode path=[0], "[1, 2, 3]" 70931792, on RedBaron 70865640>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], " " 70932296, on CommaNode 70932184>,
     'type': 'comma'}
    
*/
UCLASS()
class PROCKFPS_API PNComma : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNComma(PyObject *native) : PythonNode(native) {}
    PNComma() : PythonNode(nullptr) {}


	char *Type();

};


/*
The node represents a comparison operation, for e.g.: :file:`42 > 30`.

Equivalent python:

    42 > 30

RedBaron .help() text:

    ComparisonNode()
      # identifiers: comparison, comparison_, comparisonnode
      first ->
        IntNode()
          # identifiers: int, int_, intnode
          value='42'
      value ->
        ComparisonOperatorNode()
          # identifiers: comparison_operator, comparison_operator_, comparisonoperator, comparisonoperatornode
          first='>'
          second=''
      second ->
        IntNode()
          # identifiers: int, int_, intnode
          value='30'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first': <IntNode path=[0, 'first'], "42" 70934032, on ComparisonNode 70934312>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 70934424, on ComparisonNode 70934312>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "42 > 30" 70933864, on NoneType 1961454680>,
     'second': <IntNode path=[0, 'second'], "30" 70934200, on ComparisonNode 70934312>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 70933920, on ComparisonNode 70934312>,
     'type': 'comparison',
     'value': <ComparisonOperatorNode path=[0, 'value'], ">" 70933416, on ComparisonNode 70934312>}
    
*/
UCLASS()
class PROCKFPS_API PNComparison : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNComparison(PyObject *native) : PythonNode(native) {}
    PNComparison() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Value();
	NodeBox *Second();


	char *Type();

};


/*
The node represents "if" condition in a comprehension loop. It is always amember of a :ref:`ComprehensionLoopNode`.

Equivalent python:

    [x for x in x if condition]

RedBaron .help() text:

    ComprehensionIfNode()
      # identifiers: comprehension_if, comprehension_if_, comprehensionif, comprehensionifnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='condition'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'generators', 0, 'ifs', 0, 'first_formatting'], " " 70930616, on ComprehensionIfNode 70930672>,
     'init': False,
     'on_attribute': 'ifs',
     'parent': <ComprehensionLoopNode path=[0, 'generators', 0], " for x in x if c...n" 70931568, on ListComprehensionNode 70931176>,
     'second_formatting': <NodeList [0, 'generators', 0, 'ifs', 0, 'second_formatting'], " " 70931064, on ComprehensionIfNode 70930672>,
     'type': 'comprehension_if',
     'value': <NameNode path=[0, 'generators', 0, 'ifs', 0, 'value'], "condition" 70930840, on ComprehensionIfNode 70930672>}
    
*/
UCLASS()
class PROCKFPS_API PNComprehensionIf : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNComprehensionIf(PyObject *native) : PythonNode(native) {}
    PNComprehensionIf() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
The node represents the loop part of a comprehension structure.

Equivalent python:

    [x for y in z]

RedBaron .help() text:

    ComprehensionLoopNode()
      # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
      iterator ->
        NameNode()
          # identifiers: name, name_, namenode
          value='y'
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='z'
      ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['iterator', 'target'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'ifs'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'generators', 0, 'first_formatting'], " " 70973200, on ComprehensionLoopNode 70900088>,
     'fourth_formatting': <NodeList [0, 'generators', 0, 'fourth_formatting'], " " 70974264, on ComprehensionLoopNode 70900088>,
     'ifs': <NodeList [0, 'generators', 0, 'ifs'], "" 70974432, on ComprehensionLoopNode 70900088>,
     'init': False,
     'iterator': <NameNode path=[0, 'generators', 0, 'iterator'], "y" 70973872, on ComprehensionLoopNode 70900088>,
     'on_attribute': 'generators',
     'parent': <ListComprehensionNode path=[0], "[x for y in z]" 70899416, on RedBaron 70933528>,
     'second_formatting': <NodeList [0, 'generators', 0, 'second_formatting'], " " 70973312, on ComprehensionLoopNode 70900088>,
     'target': <NameNode path=[0, 'generators', 0, 'target'], "z" 70974376, on ComprehensionLoopNode 70900088>,
     'third_formatting': <NodeList [0, 'generators', 0, 'third_formatting'], " " 70974152, on ComprehensionLoopNode 70900088>,
     'type': 'comprehension_loop'}
    
*/
UCLASS()
class PROCKFPS_API PNComprehensionLoop : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNComprehensionLoop(PyObject *native) : PythonNode(native) {}
    PNComprehensionLoop() : PythonNode(nullptr) {}

	NodeBox *Iterator();
	NodeBox *Target();

	std::vector<NodeBox> Ifs();

	char *Type();

};


/*
A node representing an individual decorator (of a function or a class).

Equivalent python:

    @stuff.plop(*a)\ndef b(): pass

RedBaron .help() text:

    DecoratorNode()
      # identifiers: decorator, decorator_, decoratornode
      value ->
        DottedNameNode()
          # identifiers: dotted_name, dotted_name_, dottedname, dottednamenode
          value ->
            * NameNode()
                # identifiers: name, name_, namenode
                value='stuff'
            * DotNode()
                # identifiers: dot, dot_, dotnode
            * NameNode()
                # identifiers: name, name_, namenode
                value='plop'
      call ->
        CallNode()
          # identifiers: call, call_, callnode
          value ->
            * ListArgumentNode()
                # identifiers: list_argument, list_argument_, listargument, listargumentnode
                value ->
                  NameNode()
                    # identifiers: name, name_, namenode
                    value='a'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'call'],
     '_list_keys': [],
     '_str_keys': ['type'],
     'call': <CallNode path=[0, 'decorators', 0, 'call'], "(*a)" 74497048, on DecoratorNode 74497328>,
     'init': False,
     'on_attribute': 'decorators',
     'parent': <DefNode path=[0], "@stuff.plop(*a)\...n" 74496768, on RedBaron 70973928>,
     'type': 'decorator',
     'value': <DottedNameNode path=[0, 'decorators', 0, 'value'], "stuff.plop" 74497216, on DecoratorNode 74497328>}
    
*/
UCLASS()
class PROCKFPS_API PNDecorator : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDecorator(PyObject *native) : PythonNode(native) {}
    PNDecorator() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Call();

	char *Type();

};


/*
A node representing an argument in a function definition.

Equivalent python:

    def a(b, c=d): pass

RedBaron .help() text:

    0 -----------------------------------------------------
    DefArgumentNode()
      # identifiers: def_argument, def_argument_, defargument, defargumentnode
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      value ->
        None
    1 -----------------------------------------------------
    CommaNode()
      # identifiers: comma, comma_, commanode
    2 -----------------------------------------------------
    DefArgumentNode()
      # identifiers: def_argument, def_argument_, defargument, defargumentnode
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='c'
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'call'],
     '_list_keys': [],
     '_str_keys': ['type'],
     'call': <CallNode path=[0, 'decorators', 0, 'call'], "(*a)" 74497048, on DecoratorNode 74497328>,
     'init': False,
     'on_attribute': 'decorators',
     'parent': <DefNode path=[0], "@stuff.plop(*a)\...n" 74496768, on RedBaron 70973928>,
     'type': 'decorator',
     'value': <DottedNameNode path=[0, 'decorators', 0, 'value'], "stuff.plop" 74497216, on DecoratorNode 74497328>}
    
*/
UCLASS()
class PROCKFPS_API PNDefArgument : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDefArgument(PyObject *native) : PythonNode(native) {}
    PNDefArgument() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a :file:`del` statement.

Equivalent python:

    del stuff

RedBaron .help() text:

    DelNode()
      # identifiers: del, del_, delnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='stuff'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 74538568, on DelNode 74538736>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "del stuff" 70975328, on NoneType 1961454680>,
     'type': 'del',
     'value': <NameNode path=[0, 'value'], "stuff" 74538624, on DelNode 74538736>}
    
*/
UCLASS()
class PROCKFPS_API PNDel : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDel(PyObject *native) : PythonNode(native) {}
    PNDel() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing a 'kwargs' defined in a function definition argument orused in a :ref:`CallNode`.

Equivalent python:

    a(**b)

RedBaron .help() text:

    DictArgumentNode()
      # identifiers: dict_argument, dict_argument_, dictargument, dictargumentnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'value', 1, 'value', 0, 'formatting'], "" 74569936, on DictArgumentNode 74568032>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(**b)" 74569544, on AtomtrailersNode 74538848>,
     'type': 'dict_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 74569824, on DictArgumentNode 74568032>}
    
*/
UCLASS()
class PROCKFPS_API PNDictArgument : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDictArgument(PyObject *native) : PythonNode(native) {}
    PNDictArgument() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing python sugar syntactic notation for dict.

Equivalent python:

    {'a': 1, 'b': 2, 'c': 3}

RedBaron .help() text:

    DictNode()
      # identifiers: dict, dict_, dictnode
      value ->
        * DictitemNode()
            # identifiers: dictitem, dictitem_, dictitemnode
            key ->
              StringNode()
                # identifiers: string, string_, stringnode
                value="'a'"
            value ->
              IntNode()
                # identifiers: int, int_, intnode
                value='1'
        * DictitemNode()
            # identifiers: dictitem, dictitem_, dictitemnode
            key ->
              StringNode()
                # identifiers: string, string_, stringnode
                value="'b'"
            value ->
              IntNode()
                # identifiers: int, int_, intnode
                value='2'
        * DictitemNode()
            # identifiers: dictitem, dictitem_, dictitemnode
            key ->
              StringNode()
                # identifiers: string, string_, stringnode
                value="'c'"
            value ->
              IntNode()
                # identifiers: int, int_, intnode
                value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'value', 1, 'value', 0, 'formatting'], "" 74569936, on DictArgumentNode 74568032>,
     'init': False,
     'on_attribute': 'value',
     'parent': <CallNode path=[0, 'value', 1], "(**b)" 74569544, on AtomtrailersNode 74538848>,
     'type': 'dict_argument',
     'value': <NameNode path=[0, 'value', 1, 'value', 0, 'value'], "b" 74569824, on DictArgumentNode 74568032>}
    
*/
UCLASS()
class PROCKFPS_API PNDict : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDict(PyObject *native) : PythonNode(native) {}
    PNDict() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing dictionary comprehension node.

Equivalent python:

    {a: b for c in d}

RedBaron .help() text:

    DictComprehensionNode()
      # identifiers: dict_comprehension, dict_comprehension_, dictcomprehension, dictcomprehensionnode
      result ->
        DictitemNode()
          # identifiers: dictitem, dictitem_, dictitemnode
          key ->
            NameNode()
              # identifiers: name, name_, namenode
              value='a'
          value ->
            NameNode()
              # identifiers: name, name_, namenode
              value='b'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='c'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='d'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 74605120, on DictComprehensionNode 74494360>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74606408, on DictComprehensionNode 74494360>,
     'generators': <NodeList [0, 'generators'], " for c in d" 74604952, on DictComprehensionNode 74494360>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "{a: b for c in d}" 74538232, on NoneType 1961454680>,
     'result': <DictitemNode path=[0, 'result'], "a: b" 74605680, on DictComprehensionNode 74494360>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 74605456, on DictComprehensionNode 74494360>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 74605736, on DictComprehensionNode 74494360>,
     'type': 'dict_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNDictComprehension : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDictComprehension(PyObject *native) : PythonNode(native) {}
    PNDictComprehension() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing an argument to the import node.

Equivalent python:

    import a.b.c as d

RedBaron .help() text:

    DottedAsNameNode()
      # identifiers: dotted_as_name, dotted_as_name_, dottedasname, dottedasnamenode
      target='d'
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
        * NameNode()
            # identifiers: name, name_, namenode
            value='b'
        * NameNode()
            # identifiers: name, name_, namenode
            value='c'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 74605120, on DictComprehensionNode 74494360>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74606408, on DictComprehensionNode 74494360>,
     'generators': <NodeList [0, 'generators'], " for c in d" 74604952, on DictComprehensionNode 74494360>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "{a: b for c in d}" 74538232, on NoneType 1961454680>,
     'result': <DictitemNode path=[0, 'result'], "a: b" 74605680, on DictComprehensionNode 74494360>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 74605456, on DictComprehensionNode 74494360>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 74605736, on DictComprehensionNode 74494360>,
     'type': 'dict_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNDottedAsName : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDottedAsName(PyObject *native) : PythonNode(native) {}
    PNDottedAsName() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a dot '.', generally found in atom trailers (this kind of structure: 'variable.another_variable(call)[getitem]').This is the kind of formatting node that you might have to deal with if not enough high level helpers are available.The dot node is responsible for holding the formatting around it.

Equivalent python:

    a.b

RedBaron .help() text:

    NameNode()
      # identifiers: name, name_, namenode
      value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 74607136, on RedBaron 74495704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API PNDot : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNDot(PyObject *native) : PythonNode(native) {}
    PNDot() : PythonNode(nullptr) {}

	char *Type();
	char *Value();

};


/*
A node representing an elif statement.The ElifNode, like the :ref:`IfNode` or the :ref:`ElseNode` are stored in a :ref:`IfelseblockNode`.

Equivalent python:

    if a: pass\nelif b: pass

RedBaron .help() text:

    ElifNode()
      # identifiers: elif, elif_, elifnode
      test ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 74607136, on RedBaron 74495704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API PNElif : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNElif(PyObject *native) : PythonNode(native) {}
    PNElif() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an else statement.The ElseNode, like the :ref:`IfNode` or the :ref:`ElifNode`, is stored in a :ref:`IfelseblockNode`.

Equivalent python:

    if a: pass\nelse: pass

RedBaron .help() text:

    ElseNode()
      # identifiers: else, else_, elsenode
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 74607136, on RedBaron 74495704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API PNElse : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNElse(PyObject *native) : PythonNode(native) {}
    PNElse() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an except statement (member of a :ref:`TryNode`).

Equivalent python:

    try: pass\nexcept FooBar: pass\nexcept Exception: pass\nelse: pass\nfinally: pass\n

RedBaron .help() text:

    EndlNode()
      # identifiers: endl, endl_, endlnode
      value='\n'
      indent=''
    ExceptNode()
      # identifiers: except, except_, exceptnode
      delimiter=''
      exception ->
        NameNode()
          # identifiers: name, name_, namenode
          value='FooBar'
      target ->
        None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': [],
     '_str_keys': ['type', 'value'],
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a.b" 74607136, on RedBaron 74495704>,
     'type': 'name',
     'value': 'b'}
    
*/
UCLASS()
class PROCKFPS_API PNExcept : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNExcept(PyObject *native) : PythonNode(native) {}
    PNExcept() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a exec statement.

Equivalent python:

    exec '1 + 1' in a, b

RedBaron .help() text:

    ExecNode()
      # identifiers: exec, exec_, execnode
      value ->
        StringNode()
          # identifiers: string, string_, stringnode
          value="'1 + 1'"
      globals ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      locals ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 74571392, on ExecNode 74570440>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 74571672, on ExecNode 74570440>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74571280, on ExecNode 74570440>,
     'globals': <NameNode path=[0, 'globals'], "a" 74570776, on ExecNode 74570440>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 74571168, on ExecNode 74570440>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 74569040, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 74568088, on ExecNode 74570440>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 74571448, on ExecNode 74570440>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 74570272, on ExecNode 74570440>}
    
*/
UCLASS()
class PROCKFPS_API PNExec : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNExec(PyObject *native) : PythonNode(native) {}
    PNExec() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Globals();
	NodeBox *Locals();


	char *Type();

};


/*
A node representing a finally statement (member of a :ref:`TryNode`).

Equivalent python:

    try: pass\nexcept FooBar: pass\nexcept Exception: pass\nelse: pass\nfinally: pass\n").finally_.help(deep=True)

RedBaron .help() text:

    FinallyNode()
      # identifiers: finally, finally_, finallynode
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 74571392, on ExecNode 74570440>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 74571672, on ExecNode 74570440>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74571280, on ExecNode 74570440>,
     'globals': <NameNode path=[0, 'globals'], "a" 74570776, on ExecNode 74570440>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 74571168, on ExecNode 74570440>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 74569040, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 74568088, on ExecNode 74570440>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 74571448, on ExecNode 74570440>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 74570272, on ExecNode 74570440>}
    
*/
UCLASS()
class PROCKFPS_API PNFinally : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNFinally(PyObject *native) : PythonNode(native) {}
    PNFinally() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a for loop.

Equivalent python:

    for i in b:\n    pass

RedBaron .help() text:

    ForNode()
      # identifiers: for, for_, fornode
      iterator ->
        NameNode()
          # identifiers: name, name_, namenode
          value='i'
      target ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      else ->
        None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 74571392, on ExecNode 74570440>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 74571672, on ExecNode 74570440>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74571280, on ExecNode 74570440>,
     'globals': <NameNode path=[0, 'globals'], "a" 74570776, on ExecNode 74570440>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 74571168, on ExecNode 74570440>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 74569040, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 74568088, on ExecNode 74570440>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 74571448, on ExecNode 74570440>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 74570272, on ExecNode 74570440>}
    
*/
UCLASS()
class PROCKFPS_API PNFor : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNFor(PyObject *native) : PythonNode(native) {}
    PNFor() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a "from import" statement.

Equivalent python:

    from a import b

RedBaron .help() text:

    FromImportNode()
      # identifiers: from_import, from_import_, fromimport, fromimportnode
      # helpers: full_path_modules, full_path_names, modules, names
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
      targets ->
        * NameAsNameNode()
            # identifiers: name_as_name, name_as_name_, nameasname, nameasnamenode
            value='b'
            target=''
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 74571392, on ExecNode 74570440>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 74571672, on ExecNode 74570440>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74571280, on ExecNode 74570440>,
     'globals': <NameNode path=[0, 'globals'], "a" 74570776, on ExecNode 74570440>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 74571168, on ExecNode 74570440>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 74569040, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 74568088, on ExecNode 74570440>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 74571448, on ExecNode 74570440>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 74570272, on ExecNode 74570440>}
    
*/
UCLASS()
class PROCKFPS_API PNFromImport : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNFromImport(PyObject *native) : PythonNode(native) {}
    PNFromImport() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a function definition.

Equivalent python:

    def stuff():\n    pass\n

RedBaron .help() text:

    DefNode()
      # identifiers: def, def_, defnode, funcdef, funcdef_
      # default test value: name
      name='stuff'
      decorators ->
      arguments ->
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'globals', 'locals'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 74571392, on ExecNode 74570440>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 74571672, on ExecNode 74570440>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74571280, on ExecNode 74570440>,
     'globals': <NameNode path=[0, 'globals'], "a" 74570776, on ExecNode 74570440>,
     'init': False,
     'locals': <NameNode path=[0, 'locals'], "b" 74571168, on ExecNode 74570440>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "exec '1 + 1' in a, b" 74569040, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 74568088, on ExecNode 74570440>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 74571448, on ExecNode 74570440>,
     'type': 'exec',
     'value': <StringNode path=[0, 'value'], "'1 + 1'" 74570272, on ExecNode 74570440>}
    
*/
UCLASS()
class PROCKFPS_API PNFuncdef : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNFuncdef(PyObject *native) : PythonNode(native) {}
    PNFuncdef() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a generator comprehension node.

Equivalent python:

    (x for y in z)

RedBaron .help() text:

    GeneratorComprehensionNode()
      # identifiers: generator_comprehension, generator_comprehension_, generatorcomprehension, generatorcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 74745392, on GeneratorComprehensionNode 74745280>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 74746512, on GeneratorComprehensionNode 74745280>,
     'generators': <NodeList [0, 'generators'], " for y in z" 74745560, on GeneratorComprehensionNode 74745280>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(x for y in z)" 74568648, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 74745616, on GeneratorComprehensionNode 74745280>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 74746176, on GeneratorComprehensionNode 74745280>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 74745728, on GeneratorComprehensionNode 74745280>,
     'type': 'generator_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNGeneratorComprehension : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNGeneratorComprehension(PyObject *native) : PythonNode(native) {}
    PNGeneratorComprehension() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing a 'get item' access on a python object, in other words the'[stuff]' in 'some_object[stuff]'.

Equivalent python:

    a[b]

RedBaron .help() text:

    GetitemNode()
      # identifiers: getitem, getitem_, getitemnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 75059776, on GetitemNode 75059440>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'fourth_formatting'], "" 75059888, on GetitemNode 75059440>,
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a[b]" 74746792, on RedBaron 74747632>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], "" 75059272, on GetitemNode 75059440>,
     'third_formatting': <NodeList [0, 'value', 1, 'third_formatting'], "" 75059832, on GetitemNode 75059440>,
     'type': 'getitem',
     'value': <NameNode path=[0, 'value', 1, 'value'], "b" 75059328, on GetitemNode 75059440>}
    
*/
UCLASS()
class PROCKFPS_API PNGetitem : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNGetitem(PyObject *native) : PythonNode(native) {}
    PNGetitem() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
A node representing a global statement.

Equivalent python:

    global a

RedBaron .help() text:

    GlobalNode()
      # identifiers: global, global_, globalnode
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='a'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 75059776, on GetitemNode 75059440>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'fourth_formatting'], "" 75059888, on GetitemNode 75059440>,
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a[b]" 74746792, on RedBaron 74747632>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], "" 75059272, on GetitemNode 75059440>,
     'third_formatting': <NodeList [0, 'value', 1, 'third_formatting'], "" 75059832, on GetitemNode 75059440>,
     'type': 'getitem',
     'value': <NameNode path=[0, 'value', 1, 'value'], "b" 75059328, on GetitemNode 75059440>}
    
*/
UCLASS()
class PROCKFPS_API PNGlobal : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNGlobal(PyObject *native) : PythonNode(native) {}
    PNGlobal() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an if statement.The IfNode, like the :ref:`ElifNode` or the :ref:`ElseNode`, is stored in an :ref:`IfelseblockNode`.

Equivalent python:

    if a: pass

RedBaron .help() text:

    IfNode()
      # identifiers: if, if_, ifnode
      test ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'value', 1, 'first_formatting'], "" 75059776, on GetitemNode 75059440>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'fourth_formatting'], "" 75059888, on GetitemNode 75059440>,
     'init': False,
     'on_attribute': 'value',
     'parent': <AtomtrailersNode path=[0], "a[b]" 74746792, on RedBaron 74747632>,
     'second_formatting': <NodeList [0, 'value', 1, 'second_formatting'], "" 75059272, on GetitemNode 75059440>,
     'third_formatting': <NodeList [0, 'value', 1, 'third_formatting'], "" 75059832, on GetitemNode 75059440>,
     'type': 'getitem',
     'value': <NameNode path=[0, 'value', 1, 'value'], "b" 75059328, on GetitemNode 75059440>}
    
*/
UCLASS()
class PROCKFPS_API PNIf : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNIf(PyObject *native) : PythonNode(native) {}
    PNIf() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing the conditional block composed of at least one if statement,zero or more elif statements and, at the end, an optional else statement. Allthose statements are stored in a list.

Equivalent python:

    if a: pass\nelif b: pass\nelse: pass\n

RedBaron .help() text:

    IfelseblockNode()
      # identifiers: ifelseblock, ifelseblock_, ifelseblocknode
      value ->
        * IfNode()
            # identifiers: if, if_, ifnode
            test ->
              NameNode()
                # identifiers: name, name_, namenode
                value='a'
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
        * ElifNode()
            # identifiers: elif, elif_, elifnode
            test ->
              NameNode()
                # identifiers: name, name_, namenode
                value='b'
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
        * ElseNode()
            # identifiers: else, else_, elsenode
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['value'],
     '_str_keys': ['type'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "if a: pass\nelif...n" 75060168, on NoneType 1961454680>,
     'type': 'ifelseblock',
     'value': <NodeList [0, 'value'], "if a: pass\nelif...n" 75101352, on IfelseblockNode 74745336>}
    
*/
UCLASS()
class PROCKFPS_API PNIfelseblock : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNIfelseblock(PyObject *native) : PythonNode(native) {}
    PNIfelseblock() : PythonNode(nullptr) {}

	std::vector<NodeBox> Value();

	char *Type();

};


/*
A node representing the import statement of the python language.*Be careful, this node and its subnodes are way more complex than what you canexpect*.

Equivalent python:

    import foo

RedBaron .help() text:

    ImportNode()
      # identifiers: import, import_, importnode
      # helpers: modules, names
      value ->
        * DottedAsNameNode()
            # identifiers: dotted_as_name, dotted_as_name_, dottedasname, dottedasnamenode
            target=''
            value ->
              * NameNode()
                  # identifiers: name, name_, namenode
                  value='foo'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['value'],
     '_str_keys': ['type'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "if a: pass\nelif...n" 75060168, on NoneType 1961454680>,
     'type': 'ifelseblock',
     'value': <NodeList [0, 'value'], "if a: pass\nelif...n" 75101352, on IfelseblockNode 74745336>}
    
*/
UCLASS()
class PROCKFPS_API PNImport : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNImport(PyObject *native) : PythonNode(native) {}
    PNImport() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a lambda statement.

Equivalent python:

    lambda x: y

RedBaron .help() text:

    IntNode()
      # identifiers: int, int_, intnode
      value='42'
    LambdaNode()
      # identifiers: lambda, lambda_, lambdanode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='y'
      arguments ->
        * DefArgumentNode()
            # identifiers: def_argument, def_argument_, defargument, defargumentnode
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='x'
            value ->
              None
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting',
                    'arguments',
                    'second_formatting',
                    'third_formatting'],
     '_str_keys': ['type'],
     'arguments': <CommaProxyList [0, 'arguments'], "x" 75062240, on LambdaNode 75062072>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75060504, on LambdaNode 75062072>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "lambda x: y" 75060784, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 74716776, on LambdaNode 75062072>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 74716160, on LambdaNode 75062072>,
     'type': 'lambda',
     'value': <NameNode path=[0, 'value'], "y" 74716720, on LambdaNode 75062072>}
    
*/
UCLASS()
class PROCKFPS_API PNLambda : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNLambda(PyObject *native) : PythonNode(native) {}
    PNLambda() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Arguments();

	char *Type();

};


/*
A node representing a "start argument" in a function call **or** definition.

Equivalent python:

    def a(*b): pass

RedBaron .help() text:

    ListArgumentNode()
      # identifiers: list_argument, list_argument_, listargument, listargumentnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'arguments', 0, 'formatting'], "" 75131816, on ListArgumentNode 74747352>,
     'init': False,
     'on_attribute': 'arguments',
     'parent': <DefNode path=[0], "def a(*b): pass\n" 75131032, on RedBaron 75060840>,
     'type': 'list_argument',
     'value': <NameNode path=[0, 'arguments', 0, 'value'], "b" 75131872, on ListArgumentNode 74747352>}
    
*/
UCLASS()
class PROCKFPS_API PNListArgument : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNListArgument(PyObject *native) : PythonNode(native) {}
    PNListArgument() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing a list comprehension node.

Equivalent python:

    [x for y in z]

RedBaron .help() text:

    ListComprehensionNode()
      # identifiers: list_comprehension, list_comprehension_, listcomprehension, listcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 75167952, on ListComprehensionNode 75165992>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75168288, on ListComprehensionNode 75165992>,
     'generators': <NodeList [0, 'generators'], " for y in z" 75167224, on ListComprehensionNode 75165992>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "[x for y in z]" 75131368, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 75168008, on ListComprehensionNode 75165992>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 75167448, on ListComprehensionNode 75165992>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 75167392, on ListComprehensionNode 75165992>,
     'type': 'list_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNListComprehension : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNListComprehension(PyObject *native) : PythonNode(native) {}
    PNListComprehension() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing python sugar syntactic notation for list.

Equivalent python:

    [1, 2, 3]

RedBaron .help() text:

    ListNode()
      # identifiers: list, list_, listnode
      value ->
        * IntNode()
            # identifiers: int, int_, intnode
            value='1'
        * IntNode()
            # identifiers: int, int_, intnode
            value='2'
        * IntNode()
            # identifiers: int, int_, intnode
            value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 75167952, on ListComprehensionNode 75165992>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75168288, on ListComprehensionNode 75165992>,
     'generators': <NodeList [0, 'generators'], " for y in z" 75167224, on ListComprehensionNode 75165992>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "[x for y in z]" 75131368, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 75168008, on ListComprehensionNode 75165992>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 75167448, on ListComprehensionNode 75165992>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 75167392, on ListComprehensionNode 75165992>,
     'type': 'list_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNList : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNList(PyObject *native) : PythonNode(native) {}
    PNList() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing an argument to the from import statement.

Equivalent python:

    from x import a as d

RedBaron .help() text:

    NameAsNameNode()
      # identifiers: name_as_name, name_as_name_, nameasname, nameasnamenode
      value='a'
      target='d'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value', 'target'],
     'first_formatting': [' '],
     'init': False,
     'on_attribute': 'targets',
     'parent': <FromImportNode path=[0], "from x import a as d" 75166608, on RedBaron 75129408>,
     'second_formatting': [' '],
     'target': 'd',
     'type': 'name_as_name',
     'value': 'a'}
    
*/
UCLASS()
class PROCKFPS_API PNNameAsName : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNNameAsName(PyObject *native) : PythonNode(native) {}
    PNNameAsName() : PythonNode(nullptr) {}


	char *Type();
	char *Value();
	char *Target();

};


/*
A node representing a print statement.

Equivalent python:

    print(stuff)

RedBaron .help() text:

    PrintNode()
      # identifiers: print, print_, printnode
      destination ->
        None
      value ->
        * AssociativeParenthesisNode()
            # identifiers: associative_parenthesis, associative_parenthesis_, associativeparenthesis, associativeparenthesisnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='stuff'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type', 'value', 'target'],
     'first_formatting': [' '],
     'init': False,
     'on_attribute': 'targets',
     'parent': <FromImportNode path=[0], "from x import a as d" 75166608, on RedBaron 75129408>,
     'second_formatting': [' '],
     'target': 'd',
     'type': 'name_as_name',
     'value': 'a'}
    
*/
UCLASS()
class PROCKFPS_API PNPrint : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNPrint(PyObject *native) : PythonNode(native) {}
    PNPrint() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a raise statement.

Equivalent python:

    raise Exception(), foo, bar

RedBaron .help() text:

    RaiseNode()
      # identifiers: raise, raise_, raisenode
      value ->
        AtomtrailersNode()
          # identifiers: atomtrailers, atomtrailers_, atomtrailersnode
          value ->
            * NameNode()
                # identifiers: name, name_, namenode
                value='Exception'
            * CallNode()
                # identifiers: call, call_, callnode
                value ->
      instance ->
        NameNode()
          # identifiers: name, name_, namenode
          value='foo'
      traceback ->
        NameNode()
          # identifiers: name, name_, namenode
          value='bar'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'instance', 'traceback'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 75059944, on RaiseNode 75169128>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75169352, on RaiseNode 75169128>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75060056, on RaiseNode 75169128>,
     'init': False,
     'instance': <NameNode path=[0, 'instance'], "foo" 75062800, on RaiseNode 75169128>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "raise Exception(...r" 75201896, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 75169072, on RaiseNode 75169128>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 75100344, on RaiseNode 75169128>,
     'traceback': <NameNode path=[0, 'traceback'], "bar" 75062744, on RaiseNode 75169128>,
     'type': 'raise',
     'value': <AtomtrailersNode path=[0, 'value'], "Exception()" 75169576, on RaiseNode 75169128>}
    
*/
UCLASS()
class PROCKFPS_API PNRaise : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNRaise(PyObject *native) : PythonNode(native) {}
    PNRaise() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *Instance();
	NodeBox *Traceback();


	char *Type();

};


/*
A node representing python sugar syntactic notation for repr.

Equivalent python:

    `pouet`

RedBaron .help() text:

    ReprNode()
      # identifiers: repr, repr_, reprnode
      value ->
        * NameNode()
            # identifiers: name, name_, namenode
            value='pouet'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'instance', 'traceback'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting',
                    'fifth_formatting'],
     '_str_keys': ['type'],
     'fifth_formatting': <NodeList [0, 'fifth_formatting'], " " 75059944, on RaiseNode 75169128>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75169352, on RaiseNode 75169128>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75060056, on RaiseNode 75169128>,
     'init': False,
     'instance': <NameNode path=[0, 'instance'], "foo" 75062800, on RaiseNode 75169128>,
     'on_attribute': 'root',
     'parent': <RedBaron [], "raise Exception(...r" 75201896, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 75169072, on RaiseNode 75169128>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 75100344, on RaiseNode 75169128>,
     'traceback': <NameNode path=[0, 'traceback'], "bar" 75062744, on RaiseNode 75169128>,
     'type': 'raise',
     'value': <AtomtrailersNode path=[0, 'value'], "Exception()" 75169576, on RaiseNode 75169128>}
    
*/
UCLASS()
class PROCKFPS_API PNRepr : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNRepr(PyObject *native) : PythonNode(native) {}
    PNRepr() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a return statement.

Equivalent python:

    return stuff

RedBaron .help() text:

    ReturnNode()
      # identifiers: return, return_, returnnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='stuff'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 75201616, on ReturnNode 75201840>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "return stuff" 75200552, on NoneType 1961454680>,
     'type': 'return',
     'value': <NameNode path=[0, 'value'], "stuff" 75200328, on ReturnNode 75201840>}
    
*/
UCLASS()
class PROCKFPS_API PNReturn : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNReturn(PyObject *native) : PythonNode(native) {}
    PNReturn() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing python sugar syntactic notation for set.

Equivalent python:

    {1, 2, 3}

RedBaron .help() text:

    SetNode()
      # identifiers: set, set_, setnode
      value ->
        * IntNode()
            # identifiers: int, int_, intnode
            value='1'
        * IntNode()
            # identifiers: int, int_, intnode
            value='2'
        * IntNode()
            # identifiers: int, int_, intnode
            value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 75201616, on ReturnNode 75201840>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "return stuff" 75200552, on NoneType 1961454680>,
     'type': 'return',
     'value': <NameNode path=[0, 'value'], "stuff" 75200328, on ReturnNode 75201840>}
    
*/
UCLASS()
class PROCKFPS_API PNSet : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNSet(PyObject *native) : PythonNode(native) {}
    PNSet() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a set comprehension node.

Equivalent python:

    {x for y in z}

RedBaron .help() text:

    SetComprehensionNode()
      # identifiers: set_comprehension, set_comprehension_, setcomprehension, setcomprehensionnode
      result ->
        NameNode()
          # identifiers: name, name_, namenode
          value='x'
      generators ->
        * ComprehensionLoopNode()
            # identifiers: comprehension_loop, comprehension_loop_, comprehensionloop, comprehensionloopnode
            iterator ->
              NameNode()
                # identifiers: name, name_, namenode
                value='y'
            target ->
              NameNode()
                # identifiers: name, name_, namenode
                value='z'
            ifs ->
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['result'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'generators',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 75247344, on SetComprehensionNode 75245552>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], "" 75276640, on SetComprehensionNode 75245552>,
     'generators': <NodeList [0, 'generators'], " for y in z" 75246840, on SetComprehensionNode 75245552>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "{x for y in z}" 75246672, on NoneType 1961454680>,
     'result': <NameNode path=[0, 'result'], "x" 75247400, on SetComprehensionNode 75245552>,
     'second_formatting': <NodeList [0, 'second_formatting'], "" 75247176, on SetComprehensionNode 75245552>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 75246952, on SetComprehensionNode 75245552>,
     'type': 'set_comprehension'}
    
*/
UCLASS()
class PROCKFPS_API PNSetComprehension : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNSetComprehension(PyObject *native) : PythonNode(native) {}
    PNSetComprehension() : PythonNode(nullptr) {}

	NodeBox *Result();

	std::vector<NodeBox> Generators();

	char *Type();

};


/*
A node representing a slice, the "1:2:3" that can be found in a:ref:`GetitemNode`.

Equivalent python:

    a[1:-1:2]

RedBaron .help() text:

    SliceNode()
      # identifiers: slice, slice_, slicenode
      has_two_colons=True
      lower ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
      upper ->
        UnitaryOperatorNode()
          # identifiers: unitary_operator, unitary_operator_, unitaryoperator, unitaryoperatornode
          value='-'
          target ->
            IntNode()
              # identifiers: int, int_, intnode
              value='1'
      step ->
        IntNode()
          # identifiers: int, int_, intnode
          value='2'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['lower', 'upper', 'step'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type', 'has_two_colons'],
     'first_formatting': <NodeList [0, 'value', 1, 'value', 'first_formatting'], "" 75198592, on SliceNode 75202512>,
     'fourth_formatting': <NodeList [0, 'value', 1, 'value', 'fourth_formatting'], "" 75200104, on SliceNode 75202512>,
     'has_two_colons': True,
     'init': False,
     'lower': <IntNode path=[0, 'value', 1, 'value', 'lower'], "1" 75200048, on SliceNode 75202512>,
     'on_attribute': 'value',
     'parent': <GetitemNode path=[0, 'value', 1], "[1:-1:2]" 75198648, on AtomtrailersNode 75167056>,
     'second_formatting': <NodeList [0, 'value', 1, 'value', 'second_formatting'], "" 75199376, on SliceNode 75202512>,
     'step': <IntNode path=[0, 'value', 1, 'value', 'step'], "2" 75200664, on SliceNode 75202512>,
     'third_formatting': <NodeList [0, 'value', 1, 'value', 'third_formatting'], "" 75199488, on SliceNode 75202512>,
     'type': 'slice',
     'upper': <UnitaryOperatorNode path=[0, 'value', 1, 'value', 'upper'], "-1" 75201504, on SliceNode 75202512>}
    
*/
UCLASS()
class PROCKFPS_API PNSlice : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNSlice(PyObject *native) : PythonNode(native) {}
    PNSlice() : PythonNode(nullptr) {}

	NodeBox *Lower();
	NodeBox *Upper();
	NodeBox *Step();


	char *Type();
	char *HasTwoColons();

};


/*
This is a special node that handle a particular way of writing a single string inpython by putting several strings one after the other while only separated byspaces or endls.

Equivalent python:

    'a' r'b' b'c'

RedBaron .help() text:

    SpaceNode()
      # identifiers: space, space_, spacenode
      value=' '
    StringChainNode()
      # identifiers: string_chain, string_chain_, stringchain, stringchainnode
      value ->
        * StringNode()
            # identifiers: string, string_, stringnode
            value="'a'"
        * RawStringNode()
            # identifiers: raw_string, raw_string_, rawstring, rawstringnode
            value="r'b'"
        * BinaryStringNode()
            # identifiers: binary_string, binary_string_, binarystring, binarystringnode
            value="b'c'"
    

Raw PyObject __dict__ dump:

    {'_dict_keys': [],
     '_list_keys': ['value'],
     '_str_keys': ['type'],
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "'a' r'b' b'c'" 75101576, on NoneType 1961454680>,
     'type': 'string_chain',
     'value': <NodeList [0, 'value'], "'a' r'b' b'c'" 75277480, on StringChainNode 75278656>}
    
*/
UCLASS()
class PROCKFPS_API PNStringChain : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNStringChain(PyObject *native) : PythonNode(native) {}
    PNStringChain() : PythonNode(nullptr) {}

	std::vector<NodeBox> Value();

	char *Type();

};


/*
A node representing the ternary operator expression.

Equivalent python:

    a if b else c

RedBaron .help() text:

    TernaryOperatorNode()
      # identifiers: ternary_operator, ternary_operator_, ternaryoperator, ternaryoperatornode
      first ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
      second ->
        NameNode()
          # identifiers: name, name_, namenode
          value='c'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first': <NameNode path=[0, 'first'], "a" 75280168, on TernaryOperatorNode 75279216>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75280280, on TernaryOperatorNode 75279216>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], " " 75317600, on TernaryOperatorNode 75279216>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "a if b else c" 75279944, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "c" 75317712, on TernaryOperatorNode 75279216>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75317320, on TernaryOperatorNode 75279216>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 75317488, on TernaryOperatorNode 75279216>,
     'type': 'ternary_operator',
     'value': <NameNode path=[0, 'value'], "b" 75317432, on TernaryOperatorNode 75279216>}
    
*/
UCLASS()
class PROCKFPS_API PNTernaryOperator : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNTernaryOperator(PyObject *native) : PythonNode(native) {}
    PNTernaryOperator() : PythonNode(nullptr) {}

	NodeBox *First();
	NodeBox *Value();
	NodeBox *Second();


	char *Type();

};


/*
A node representing a try statement. This node is responsible for holding the:ref:`ExceptNode`, :ref:`FinallyNode` and :ref:`ElseNode`.

Equivalent python:

    try: pass\nexcept FooBar: pass\nexcept Exception: pass\nelse: pass\nfinally: pass\n

RedBaron .help() text:

    TryNode()
      # identifiers: try, try_, trynode
      else ->
        ElseNode()
          # identifiers: else, else_, elsenode
          value ->
            * PassNode()
                # identifiers: pass, pass_, passnode
      finally ->
        FinallyNode()
          # identifiers: finally, finally_, finallynode
          value ->
            * PassNode()
                # identifiers: pass, pass_, passnode
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
      excepts ->
        * ExceptNode()
            # identifiers: except, except_, exceptnode
            delimiter=''
            exception ->
              NameNode()
                # identifiers: name, name_, namenode
                value='FooBar'
            target ->
              None
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
        * ExceptNode()
            # identifiers: except, except_, exceptnode
            delimiter=''
            exception ->
              NameNode()
                # identifiers: name, name_, namenode
                value='Exception'
            target ->
              None
            value ->
              * PassNode()
                  # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first': <NameNode path=[0, 'first'], "a" 75280168, on TernaryOperatorNode 75279216>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75280280, on TernaryOperatorNode 75279216>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], " " 75317600, on TernaryOperatorNode 75279216>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "a if b else c" 75279944, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "c" 75317712, on TernaryOperatorNode 75279216>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75317320, on TernaryOperatorNode 75279216>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 75317488, on TernaryOperatorNode 75279216>,
     'type': 'ternary_operator',
     'value': <NameNode path=[0, 'value'], "b" 75317432, on TernaryOperatorNode 75279216>}
    
*/
UCLASS()
class PROCKFPS_API PNTry : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNTry(PyObject *native) : PythonNode(native) {}
    PNTry() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing python sugar syntactic notation for tuple.

Equivalent python:

    (1, 2, 3)

RedBaron .help() text:

    TupleNode()
      # identifiers: tuple, tuple_, tuplenode
      with_parenthesis=True
      value ->
        * IntNode()
            # identifiers: int, int_, intnode
            value='1'
        * IntNode()
            # identifiers: int, int_, intnode
            value='2'
        * IntNode()
            # identifiers: int, int_, intnode
            value='3'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['first', 'value', 'second'],
     '_list_keys': ['first_formatting',
                    'second_formatting',
                    'third_formatting',
                    'fourth_formatting'],
     '_str_keys': ['type'],
     'first': <NameNode path=[0, 'first'], "a" 75280168, on TernaryOperatorNode 75279216>,
     'first_formatting': <NodeList [0, 'first_formatting'], " " 75280280, on TernaryOperatorNode 75279216>,
     'fourth_formatting': <NodeList [0, 'fourth_formatting'], " " 75317600, on TernaryOperatorNode 75279216>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "a if b else c" 75279944, on NoneType 1961454680>,
     'second': <NameNode path=[0, 'second'], "c" 75317712, on TernaryOperatorNode 75279216>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75317320, on TernaryOperatorNode 75279216>,
     'third_formatting': <NodeList [0, 'third_formatting'], " " 75317488, on TernaryOperatorNode 75279216>,
     'type': 'ternary_operator',
     'value': <NameNode path=[0, 'value'], "b" 75317432, on TernaryOperatorNode 75279216>}
    
*/
UCLASS()
class PROCKFPS_API PNTuple : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNTuple(PyObject *native) : PythonNode(native) {}
    PNTuple() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a number sign modification operator like :file:`-2` or :file:`+42`.

Equivalent python:

    -1

RedBaron .help() text:

    UnitaryOperatorNode()
      # identifiers: unitary_operator, unitary_operator_, unitaryoperator, unitaryoperatornode
      value='-'
      target ->
        IntNode()
          # identifiers: int, int_, intnode
          value='1'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['target'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type', 'value'],
     'formatting': <NodeList [0, 'formatting'], "" 75381112, on UnitaryOperatorNode 75380832>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "-1" 75380552, on NoneType 1961454680>,
     'target': <IntNode path=[0, 'target'], "1" 75379432, on UnitaryOperatorNode 75380832>,
     'type': 'unitary_operator',
     'value': '-'}
    
*/
UCLASS()
class PROCKFPS_API PNUnitaryOperator : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNUnitaryOperator(PyObject *native) : PythonNode(native) {}
    PNUnitaryOperator() : PythonNode(nullptr) {}

	NodeBox *Target();

	std::vector<NodeBox> Formatting();

	char *Type();
	char *Value();

};


/*
A node representing a yield statement.

Equivalent python:

    yield 42

RedBaron .help() text:

    YieldNode()
      # identifiers: yield, yield_, yieldnode
      value ->
        IntNode()
          # identifiers: int, int_, intnode
          value='42'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['formatting'],
     '_str_keys': ['type'],
     'formatting': <NodeList [0, 'formatting'], " " 75352552, on YieldNode 75353000>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "yield 42" 75353112, on NoneType 1961454680>,
     'type': 'yield',
     'value': <IntNode path=[0, 'value'], "42" 75352832, on YieldNode 75353000>}
    
*/
UCLASS()
class PROCKFPS_API PNYield : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNYield(PyObject *native) : PythonNode(native) {}
    PNYield() : PythonNode(nullptr) {}

	NodeBox *Value();

	std::vector<NodeBox> Formatting();

	char *Type();

};


/*
A node representing a yield statement surrounded by parenthesis.

Equivalent python:

    (yield 42)

RedBaron .help() text:

    YieldAtomNode()
      # identifiers: yield_atom, yield_atom_, yieldatom, yieldatomnode
      value ->
        IntNode()
          # identifiers: int, int_, intnode
          value='42'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting', 'second_formatting', 'third_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 75351432, on YieldAtomNode 75352272>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(yield 42)" 75352328, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75350592, on YieldAtomNode 75352272>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 75350480, on YieldAtomNode 75352272>,
     'type': 'yield_atom',
     'value': <IntNode path=[0, 'value'], "42" 75353448, on YieldAtomNode 75352272>}
    
*/
UCLASS()
class PROCKFPS_API PNYieldAtom : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNYieldAtom(PyObject *native) : PythonNode(native) {}
    PNYieldAtom() : PythonNode(nullptr) {}

	NodeBox *Value();


	char *Type();

};


/*
A node representing a while loop.

Equivalent python:

    while condition:\n    pass

RedBaron .help() text:

    WhileNode()
      # identifiers: while, while_, whilenode
      test ->
        NameNode()
          # identifiers: name, name_, namenode
          value='condition'
      else ->
        None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value'],
     '_list_keys': ['first_formatting', 'second_formatting', 'third_formatting'],
     '_str_keys': ['type'],
     'first_formatting': <NodeList [0, 'first_formatting'], "" 75351432, on YieldAtomNode 75352272>,
     'init': False,
     'on_attribute': 'root',
     'parent': <RedBaron [], "(yield 42)" 75352328, on NoneType 1961454680>,
     'second_formatting': <NodeList [0, 'second_formatting'], " " 75350592, on YieldAtomNode 75352272>,
     'third_formatting': <NodeList [0, 'third_formatting'], "" 75350480, on YieldAtomNode 75352272>,
     'type': 'yield_atom',
     'value': <IntNode path=[0, 'value'], "42" 75353448, on YieldAtomNode 75352272>}
    
*/
UCLASS()
class PROCKFPS_API PNWhile : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNWhile(PyObject *native) : PythonNode(native) {}
    PNWhile() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};


/*
A node representing a while loop.

Equivalent python:

    with a as b: pass

RedBaron .help() text:

    WithContextItemNode()
      # identifiers: with_context_item, with_context_item_, withcontextitem, withcontextitemnode
      value ->
        NameNode()
          # identifiers: name, name_, namenode
          value='a'
      as ->
        NameNode()
          # identifiers: name, name_, namenode
          value='b'
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'as'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'as': <NameNode path=[0, 'contexts', 0, 'as'], "b" 75425888, on WithContextItemNode 75382456>,
     'first_formatting': <NodeList [0, 'contexts', 0, 'first_formatting'], " " 75425272, on WithContextItemNode 75382456>,
     'init': False,
     'on_attribute': 'contexts',
     'parent': <WithNode path=[0], "with a as b: pass\n" 75425104, on RedBaron 75381336>,
     'second_formatting': <NodeList [0, 'contexts', 0, 'second_formatting'], " " 75425160, on WithContextItemNode 75382456>,
     'type': 'with_context_item',
     'value': <NameNode path=[0, 'contexts', 0, 'value'], "a" 75425384, on WithContextItemNode 75382456>}
    
*/
UCLASS()
class PROCKFPS_API PNWithContextItem : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNWithContextItem(PyObject *native) : PythonNode(native) {}
    PNWithContextItem() : PythonNode(nullptr) {}

	NodeBox *Value();
	NodeBox *As();


	char *Type();

};


/*
A node representing a with statement.

Equivalent python:

    with a as b, c: pass

RedBaron .help() text:

    WithNode()
      # identifiers: with, with_, withnode
      contexts ->
        * WithContextItemNode()
            # identifiers: with_context_item, with_context_item_, withcontextitem, withcontextitemnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='a'
            as ->
              NameNode()
                # identifiers: name, name_, namenode
                value='b'
        * WithContextItemNode()
            # identifiers: with_context_item, with_context_item_, withcontextitem, withcontextitemnode
            value ->
              NameNode()
                # identifiers: name, name_, namenode
                value='c'
            as ->
              None
      value ->
        * PassNode()
            # identifiers: pass, pass_, passnode
    

Raw PyObject __dict__ dump:

    {'_dict_keys': ['value', 'as'],
     '_list_keys': ['first_formatting', 'second_formatting'],
     '_str_keys': ['type'],
     'as': <NameNode path=[0, 'contexts', 0, 'as'], "b" 75425888, on WithContextItemNode 75382456>,
     'first_formatting': <NodeList [0, 'contexts', 0, 'first_formatting'], " " 75425272, on WithContextItemNode 75382456>,
     'init': False,
     'on_attribute': 'contexts',
     'parent': <WithNode path=[0], "with a as b: pass\n" 75425104, on RedBaron 75381336>,
     'second_formatting': <NodeList [0, 'contexts', 0, 'second_formatting'], " " 75425160, on WithContextItemNode 75382456>,
     'type': 'with_context_item',
     'value': <NameNode path=[0, 'contexts', 0, 'value'], "a" 75425384, on WithContextItemNode 75382456>}
    
*/
UCLASS()
class PROCKFPS_API PNWith : public ABoxActor, public PythonNode {
    GENERATED_BODY()

public: 
    PNWith(PyObject *native) : PythonNode(native) {}
    PNWith() : PythonNode(nullptr) {}

	std::vector<NodeBox> NodeList();
};

